/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
!function(t,e,n,a){"use strict";function o(){var e=JSON.parse(localStorage.events);e.forEach(function(e){t("#event-listing tbody").append('<tr data-event-id="'+e.id+'">\t\t\t\t\t\t\t\t\t\t<td>'+e.name+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.topic+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.speaker+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.date.day+" "+e.date.month+" "+e.date.year+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.time_24h.hour+":"+e.time_24h.minute+'</td>\t\t\t\t\t\t\t\t\t\t<td>\t\t\t\t\t\t\t\t\t\t\t<i class="fa fa-pencil" id="edit-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t\t\t<i class="fa fa-trash" id="delete-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\t\t\t</tr>\t\t\t')})}function i(e){t(".wdw").fadeOut(300),t("#"+e).fadeIn(300)}function l(){t("#linkRegister").fadeOut(500),t("#linkLogin").fadeOut(500),t("#linkLogout").fadeIn(500)}function r(){var e=t("#inputpostimg").val(),n=t("#inputposttitel").val(),a=t("#inputpostdesc").val(),o=t("#inputpostlocation").val(),i={postimageurl:e,posttitel:n,postdesc:a,postloc:o};console.log(i)}function d(){var t={username:"username",password:"password"};localStorage.setItem("credentials",JSON.stringify(t))}function c(){var e=JSON.parse(localStorage.partners);t("#partners-table tbody").html(""),e.forEach(function(e){t("#partners-table tbody").append("<tr>        <td>"+e.id+"</td>        <td>"+e.name+"</td>        <td>"+e.type+"</td>        <td>"+e.description+"</td>        <td>"+e.partnerpic_src+"</td>        <td><i class='fa fa-pencil' id='edit-partner-btn' data-partner-id = '"+e.id+"'></i>        <i class='fa fa-trash' id='delete-partner-btn' data-partner-id = '"+e.id+"'></i></td>        </tr>")})}function s(t,e,n){t=t.toLowerCase(),e=e.toLowerCase(),console.log("The input value is: "+t),console.log("The JSON data to compare is: "+e);var a=e.includes(t);console.log("The bool = "+a),1==a?(console.log("True"),jResults.add(n)):console.log("False")}null==localStorage.events?(console.log("localStorage.events is empty"),t.getJSON("assets/data/events.json").done(function(t){console.log(t),t=JSON.stringify(t),localStorage.events=t,console.log("localStorage.events successfully populated"),o()})):localStorage.events&&(console.log("localStorage.events has data"),o()),t("#create-event-btn").on("click",function(){console.log("save-btn clicked");var e=new Date;e=e.valueOf();var n=t("#wdw-event-create").find("input[name='event-name']").val(),a=t("#wdw-event-create").find("input[name='event-topics']").val(),o=t("#wdw-event-create").find("input[name='event-level']").val(),i=t("#wdw-event-create").find("input[name='event-speaker']").val(),l=t("#wdw-event-create").find("input[name='event-speaker-org']").val(),r=new Date(t("#wdw-event-create").find("input[name='event-date']").val()),d=t("#wdw-event-create").find("input[name='event-time']").val(),c=t("#wdw-event-create").find("input[name='event-info']").val();console.log(p);var s=[],s=a.split(",");for(console.log(s),u=0;u<s.length;u++)" "==s[u].charAt(0)&&(console.log("first char: "+s[u].charAt(0)),s[u]=s[u].slice(1,s[u].length),console.log("str now equals "+s[u]))," "==s[u].charAt(s[u].length-1)&&(console.log("last char: "+s[u].charAt(0)),s[u]=s[u].slice(0,s[u].length-1),console.log("str now equals "+s[u]));console.log(s);var p=d.split(":",2);p.forEach(function(t){if(console.log("aTime Foreach"),console.log(t.length),t.length>2)return console.log(t),void console.log("Invalid time");if(t.length<=2){var e=p.indexOf(t);0==e?(console.log(t),r.setHours(t)):1==e&&(console.log(t),r.setMinutes(t))}}),console.log(r);var v={id:e,name:n,topic:s,level:o,speaker:i,speaker_organization:l,date:{day:r.getDate(),month:r.getMonth(),year:r.getFullYear()},time_24h:{hour:r.getHours(),minute:r.getMinutes()},info:c,past:!1};console.log(v);var g=JSON.parse(localStorage.events);g.push(v),localStorage.setItem("events",JSON.stringify(g)),t("#event-listing").append('<tr data-event-id="'+v.id+'">\t\t\t\t\t\t\t\t\t<td>'+v.name+"</td>\t\t\t\t\t\t\t\t\t<td>"+v.topic+"</td>\t\t\t\t\t\t\t\t\t<td>"+v.speaker+"</td>\t\t\t\t\t\t\t\t\t<td>"+v.date.day+" "+v.date.month+" "+v.date.year+"</td>\t\t\t\t\t\t\t\t\t<td>"+v.time_24h.hour+":"+v.time_24h.minute+'</td>\t\t\t\t\t\t\t\t\t<td>\t\t\t\t\t\t\t\t\t\t<i class="fa fa-pencil" id="edit-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t\t<i class="fa fa-trash" id="delete-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\t\t</tr>\t')}),t(n).on("click","#edit-event-icon",function(){console.log(".fa-pencil icon clicked");var e=t(this).parent().parent().data("event-id");t("#wdw-event-update").attr("data-event-id",e);var a=JSON.parse(localStorage.events);a.forEach(function(a){if(a.id==e){var o=a.date.year+"-"+a.date.month+"-"+a.date.day,i=o.split("-");if(1==i[1].length){var l=i[1].toString(),r="0",d=r.concat(l);i[1]=d,console.log(i[1])}if(1==i[2].length){var l=i[2].toString(),r="0",d=r.concat(l);i[2]=d,console.log(i[2])}var o=a.date.year+"-"+i[1]+"-"+i[2];console.log(o),t("#wdw-event-update").find("input[name='event-name']").val(a.name),t("#wdw-event-update").find("input[name='event-topics']").val(a.topic),t("#wdw-event-update").find("input[name='event-level']").val(a.level),t("#wdw-event-update").find("input[name='event-speaker']").val(a.speaker),t("#wdw-event-update").find("input[name='event-speaker-org']").val(a.speaker_organization),n.getElementById("edit-event-date").value=o,t("#wdw-event-update").find("input[name='event-time']").val(a.time_24h.hour+":"+a.time_24h.minute),t("#wdw-event-update").find("input[name='event-info']").val(a.info)}})}),t("#update-event-btn").on("click",function(){console.log("#update-event clicked");var e=t("#wdw-event-update").attr("data-event-id"),a=t("#wdw-event-update").find("input[name='event-name']").val(),o=t("#wdw-event-update").find("input[name='event-topics']").val(),i=t("#wdw-event-update").find("input[name='event-level']").val(),l=t("#wdw-event-update").find("input[name='event-speaker']").val(),r=t("#wdw-event-update").find("input[name='event-speaker-org']").val(),d=new Date(t("#wdw-event-update").find("input[name='event-date']").val()),c=t("#wdw-event-update").find("input[name='event-time']").val(),s=t("#wdw-event-update").find("input[name='event-info']").val();console.log(v);var p=[],p=o.split(",");for(console.log(p),u=0;u<p.length;u++)" "==p[u].charAt(0)&&(console.log("first char: "+p[u].charAt(0)),p[u]=p[u].slice(1,p[u].length),console.log("str now equals "+p[u]))," "==p[u].charAt(p[u].length-1)&&(console.log("last char: "+p[u].charAt(0)),p[u]=p[u].slice(0,p[u].length-1),console.log("str now equals "+p[u]));console.log(p);var v=c.split(":",2);v.forEach(function(t){if(console.log("aTime Foreach"),console.log(t.length),t.length>2)return console.log(t),void console.log("Invalid time");if(t.length<=2){var e=v.indexOf(t);0==e?(console.log(t),d.setHours(t)):1==e&&(console.log(t),d.setMinutes(t))}}),console.log(d);var g={id:e,name:a,topic:p,level:i,speaker:l,speaker_organization:r,date:{day:d.getDate(),month:d.getMonth(),year:d.getFullYear()},time_24h:{hour:d.getHours(),minute:d.getMinutes()},info:s,past:!1};console.log(g);var f=JSON.parse(localStorage.events);f.forEach(function(t){t.id==g.id&&f.splice(f.indexOf(t),1)}),f.push(g),localStorage.setItem("events",JSON.stringify(f)),t("#wdw-event-update").attr("data-event-id",""),t(n).find("[data-event-id="+g.id+"]").remove(),t("#event-listing tbody").prepend('<tr data-event-id="'+g.id+'">\t\t\t\t\t\t\t\t\t<td>'+g.name+"</td>\t\t\t\t\t\t\t\t\t<td>"+g.topic+"</td>\t\t\t\t\t\t\t\t\t<td>"+g.speaker+"</td>\t\t\t\t\t\t\t\t\t<td>"+g.date.day+" "+g.date.month+" "+g.date.year+"</td>\t\t\t\t\t\t\t\t\t<td>"+g.time_24h.hour+":"+g.time_24h.minute+'</td>\t\t\t\t\t\t\t\t\t<td>\t\t\t\t\t\t\t\t\t\t<i class="fa fa-pencil" id="edit-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t\t<i class="fa fa-trash" id="delete-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\t\t</tr>\t')}),t("#cancel-update-event-btn").on("click",function(){t("#wdw-event-update").attr("data-event-id","")}),t(n).on("click","#delete-event-icon",function(){console.log(".fa-trash icon clicked");var e=t(this).parent().parent().data("event-id"),a=JSON.parse(localStorage.events);a.forEach(function(t){t.id==e&&(a.splice(a.indexOf(t),1),console.log("ID "+t.id+"spliced from localTemp"))}),console.log(a),localStorage.events=JSON.stringify(a),t(n).find("[data-event-id="+e+"]").remove()});var p=[];if(localStorage.sEvents){var v=localStorage.sEvents;p=JSON.parse(v)}t(function(){});for(var u=0;u<p.length;u++)t("#lblEvents").append('<tr><th scope="row"><h4>'+p[u].id+"</h4></th><td><h4>"+p[u].name+'</h4></td><td><i class="fa fa-trash" aria-hidden="true"></i></td></tr>');t("#postbtn").on("click",function(){var e=(new Date).getTime(),n=t("#inputpostimg").val(),a=t("#inputpostevent").val(),o=t("#inputpostdesc").val(),l=t("#inputpostlocation").val(),r="link";t("#lblEvents").append("<tr><td>"+a+"</td><td>"+l+"</td><td>"+e+"</td><td>"+r+'</td><td><i class="fa fa-trash" aria-hidden="true"></i></td></tr>'),i("wdw-calendar");var d={};d.id=(new Date).getTime(),d.imageUrl=n,d.postevent=a,d.PostDesc=o,d.sPostLocation=l,p.push(d);var c=JSON.stringify(p);localStorage.sEvents=c}),t("#lblEvents div").each(function(e){console.log(e+": "+t(this).text()),t(this).css}),t(n).ready(function(){i("wdw-events")}),t(n).ready(function(){d()}),t("#loginbtn").on("click",function(){var e=JSON.parse(localStorage.getItem("credentials")),n=JSON.parse(localStorage.getItem("credentialsMember")),a=t("#inputusername").val(),o=t("#inputpassword").val();e.username===a&&e.password===o||n.username===a&&n.password===o?(console.log("Welcome Mr.   "+e.username),l(),t(".brand h1").text("Logged in as Admin # "+e.username),i("wdw-register-member"),console.log(n.username+n.password)):console.log("failed login")}),t("#memberbtn").on("click",function(){var e=t("#inputfnamereg").val(),n=t("#inputlnamereg").val(),a=t("#inputemailreg").val(),o=t("#inputlocationreg").val(),l=t("#inputusernamereg").val(),r=t("#inputpasswordreg").val(),d={fname:e,lname:n,email:a,location:o,username:l,password:r};localStorage.setItem("credentialsMember",JSON.stringify(d)),console.log("Local Storage store",d),i("wdw-login")}),t(n).ready(function(){t("#wdw-edit-partner").hide(),t("#wdw-add-partner").hide(),t("#partners-table tbody").html("");var e=[];null!==localStorage.getItem("partners")&&(e=JSON.parse(localStorage.partners),console.log("local storage: ",e)),t.getJSON("assets/data/partners.json",function(t){null!=localStorage.getItem("partners")&&"[]"!=localStorage.getItem("partners")||(localStorage.partners=JSON.stringify(t)),t.forEach(function(t){var e={};e.id=t.id,e.name=t.name,e.description=t.description,e.partnerpic_src=t.partnerpic_src,console.log("Partner id.",e.id,", name: ",e.name,", description: ",e.description,", picture/logo: ",e.partnerpic_src)}),c()})});var g;t("body").on("click","#edit-partner-btn",function(){g=t(this).data("partner-id"),t("#wdw-list-partners").hide(),t("#wdw-edit-partner").show();var e=JSON.parse(localStorage.partners);e.forEach(function(e){e.id==g&&(t("input[name='partner-name']").val(e.name),t("input[name='partner-type']").val(e.type),t("input[name='partner-descr']").val(e.description),t("input[name='partner-pict']").val(e.partnerpic_src))})}),t("#partner-save-btn").on("click",function(){var e={};e.id=g,e.name=t("input[name='partner-name']").val(),e.type=t("input[name='partner-type']").val(),e.description=t("input[name='partner-descr']").val(),e.partnerpic_src=t("input[name='partner-pict']").val();var n=JSON.parse(localStorage.partners);n.forEach(function(t,a){t.id==g&&(n[a]=e)}),localStorage.setItem("partners",JSON.stringify(n)),t("#wdw-edit-partner").hide(),c(),t("#wdw-list-partners").show()}),t("#cancel-btn").on("click",function(){t("#wdw-edit-partner").hide(),t("#wdw-list-partners").show()}),t("#add-partner-btn").on("click",function(){t("#wdw-list-partners").hide(),t("#wdw-add-partner").show()}),t("#partner-add-now-btn").on("click",function(){var e={};e.name=t("input[name='partner-add-name']").val(),e.type=t("input[name='partner-add-type']").val(),e.description=t("input[name='partner-add-descr']").val(),e.partnerpic_src=t("input[name='partner-add-pict']").val(),t("input[name='partner-add-name']").val(""),t("input[name='partner-add-type']").val(""),t("input[name='partner-add-descr']").val(""),t("input[name='partner-add-pict']").val("");var n=JSON.parse(localStorage.partners);e.id=n.length+1,n.push(e),localStorage.setItem("partners",JSON.stringify(n)),c(),t("#wdw-add-partner").hide(),t("#wdw-list-partners").show()}),t("#cancel-btn2").on("click",function(){t("#wdw-add-partner").hide(),t("#wdw-list-partners").show()}),t("body").on("click","#delete-partner-btn",function(){g=t(this).data("partner-id");var e=JSON.parse(localStorage.partners);e.forEach(function(t,n){t.id==g&&swal({title:"Are you sure?",text:"Do you want to delete this partner!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",closeOnConfirm:!1},function(){e.splice(n,1),localStorage.setItem("partners",JSON.stringify(e)),c(),swal("Deleted!","The partner has been deleted.","success")})})}),t("#searchEvents").on("click",function(){var e=t("#search-engine").val(),n=e.split(" ");console.log(n),jTemp.forEach(function(t){var e=t.name,n=t.topic,a=t.level,o=t.speaker_organization;t.location;console.log(e,n,a,o),console.log("compare to: "+temp)}),n.forEach(function(t){var e=t;jTemp.forEach(function(t){var n=t.name,a=(t.topic,t.level),o=t.speaker_organization;t.location;s(e,n),s(e,a),s(e,o)})})}),t("#postbtn").on("click",function(){r(),console.log("post event")}),t("#link-login").on("click",function(){i("wdw-login"),console.log("Nav - login clicked")}),t("#link-home").on("click",function(){i("wdw-events"),console.log("Nav - Home Clicked ")}),t("#link-events").on("click",function(){i("wdw-event-manager-container")}),t("#linkNews").on("click",function(){i("wdw-news")}),t("#link-partners").on("click",function(){i("partners-container")}),t("#linkCalendar").on("click",function(){i("wdw-calendar"),console.log("Nav - Calendar clicked")}),t("#linkAllEvents").on("click",function(){i("wdw-all-events"),console.log("Nav - all events click")}),t("#btnpostevent").on("click",function(){i("wdw-post-event"),console.log("Postclicke")}),p.indexOf(this),t(".fa-fa-trash").click(function(){console.log("Trashed clicked",p,p[u],p.length),p.splice(1,1)}),t(".fa-fa-trash").click(function(){t(this).parent().hide(),console.log("Trash delete clicked ")}),console.log("events",p)}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwiaW5pdFBvcERhdGEiLCJqRXZlbnRzIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZXZlbnRzIiwiZm9yRWFjaCIsImoiLCJhcHBlbmQiLCJpZCIsIm5hbWUiLCJ0b3BpYyIsInNwZWFrZXIiLCJkYXRlIiwiZGF5IiwibW9udGgiLCJ5ZWFyIiwidGltZV8yNGgiLCJob3VyIiwibWludXRlIiwiaGlkZVdpbmRvd3NBbmRTaG93T25lV2luZG93Iiwic1dpbmRvd0lkIiwiZmFkZU91dCIsImZhZGVJbiIsImlzTG9nZ2VkSW4iLCJnZXRQb3N0Iiwic0ltYWdlVXJsIiwidmFsIiwic3Bvc3R0aXRlbCIsInNQb3N0RGVzYyIsInNQb3N0TG9jYXRpb24iLCJQb3N0IiwicG9zdGltYWdldXJsIiwicG9zdHRpdGVsIiwicG9zdGRlc2MiLCJwb3N0bG9jIiwiY29uc29sZSIsImxvZyIsImxvZ2luQWRtaW4iLCJ1c2VyQ3JlZHNBZG1pbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwibGlzdFBhcnRuZXJzRnJvbUxTIiwiZmluYWxQYXJ0bmVycyIsInBhcnRuZXJzIiwiaHRtbCIsIml0ZW0iLCJ0eXBlIiwiZGVzY3JpcHRpb24iLCJwYXJ0bmVycGljX3NyYyIsImNvbXBhcmUiLCJpbnB1dFZhbCIsImRhdGFWYWwiLCJqT2JqIiwidG9Mb3dlckNhc2UiLCJib29sIiwiaW5jbHVkZXMiLCJqUmVzdWx0cyIsImFkZCIsImdldEpTT04iLCJkb25lIiwiakRhdGEiLCJvbiIsInNJZCIsIkRhdGUiLCJ2YWx1ZU9mIiwic05hbWUiLCJmaW5kIiwic1RvcGljcyIsInNMZXZlbCIsInNTcGVha2VyIiwic1NwZWFrZXJPcmciLCJkRGF0ZSIsInNUaW1lIiwic0luZm8iLCJhVGltZSIsImFUb3BpY3MiLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJjaGFyQXQiLCJzbGljZSIsImluZGV4IiwiaW5kZXhPZiIsInNldEhvdXJzIiwic2V0TWludXRlcyIsImpFdmVudE9iaiIsImxldmVsIiwic3BlYWtlcl9vcmdhbml6YXRpb24iLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImluZm8iLCJwYXN0IiwibG9jYWxUZW1wIiwicHVzaCIsInNEYXRhSWQiLCJ0aGlzIiwicGFyZW50IiwiZGF0YSIsImF0dHIiLCJhRGF0ZSIsInRlbXAiLCJ0b1N0cmluZyIsInplcm8iLCJzdHIiLCJjb25jYXQiLCJnZXRFbGVtZW50QnlJZCIsInZhbHVlIiwic3BsaWNlIiwicmVtb3ZlIiwicHJlcGVuZCIsImFFdmVudHMiLCJzRXZlbnRzIiwic0V2ZW50c0Zyb21Mb2NhbFN0b3JhZ2UiLCJzRXZlbnRJZCIsImdldFRpbWUiLCJzcG9zdGV2ZW50Iiwic0xpbmsiLCJqRXZlbnQiLCJpbWFnZVVybCIsInBvc3RldmVudCIsIlBvc3REZXNjIiwic0ZpbmFsRXZlbnRzIiwiZWFjaCIsInRleHQiLCJjc3MiLCJyZWFkeSIsImNyZWRlbnRpYWxzIiwiZ2V0SXRlbSIsImNyZWRlbnRpYWxzTWVtYmVyIiwidXNlcm5hbWVJbnB1dCIsImlucHV0Zm5hbWUiLCJpbnB1dGxuYW1lIiwiaW5wdXRlbWFpbCIsImlucHV0bG9jYXRpb24iLCJpbnB1dHVzZXJuYW1lIiwiaW5wdXRwYXNzIiwidXNlckNyZWRzIiwiZm5hbWUiLCJsbmFtZSIsImVtYWlsIiwibG9jYXRpb24iLCJoaWRlIiwib1BhcnRuZXJzIiwianNvbl9kYXRhIiwiZWxlbSIsIm9iaiIsInNob3ciLCJzd2FsIiwidGl0bGUiLCJzaG93Q2FuY2VsQnV0dG9uIiwiY29uZmlybUJ1dHRvbkNvbG9yIiwiY29uZmlybUJ1dHRvblRleHQiLCJjbG9zZU9uQ29uZmlybSIsImlucHV0U2VhcmNoRmllbGQiLCJhSW5wdXQiLCJqVGVtcCIsIm9yZyIsImEiLCJjbGljayIs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aEJ6RyxFQUFFLGdCQUFnQndLLE1BQU0sV0FDdEJoSSxRQUFRQyxJQUFJLGtCQUFtQitFLEVBQVNBLEVBQVFwQyxHQUFJb0MsRUFBUW5DLFFBQzVEbUMsRUFBUUgsT0FBTyxFQUFFLEtBS25CckgsRUFBRSxnQkFBZ0J3SyxNQUFNLFdBQ3RCeEssRUFBRXlHLE1BQU1DLFNBQVM2QyxPQUNqQi9HLFFBQVFDLElBQUksMkJBT2RELFFBQVFDLElBQUksU0FBVytFLElBRXRCaUQsT0FBUXhLLE9BQVFDIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5cclxuXHJcbihmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcbiAgXHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuXHJcbi8vY2hlY2sgaWYgdXNlciBzdGF0ZSA9PSBhZG1pbiBvciB1c2VyXHJcbi8vaWYgZmFsc2UsIGRvIHRoaXMuLlxyXG4vL2lmIHRydWUgZG8gdGhhdC4uXHJcblxyXG5cclxuLy9JTklUIExPQ0FMIFNUT1JBR0UgLSBJRiBOTyBEQVRBIElTIFBSRVNFTlRcclxuICBpZiAobG9jYWxTdG9yYWdlLmV2ZW50cyA9PSBudWxsKSB7XHJcbiAgICAvL2ltcG9ydCBkYXRhIGZyb20gZGF0YS9ldmVudHMuanNvblxyXG4gICAgLy9pbnB1dCBpbnRvIGxvY2FsU3RvcmFnZS5ldmVudHNcclxuICAgIC8vanNvbiBmaWxlIHdpbGwgYWx3YXlzIGhhdmUgZGF0YSwgd2hpY2ggaXMgd2h5IHRoaXMgbWV0aG9kIHdpbGwgYWx3YXlzIHdvcmshXHJcbiAgICBjb25zb2xlLmxvZyhcImxvY2FsU3RvcmFnZS5ldmVudHMgaXMgZW1wdHlcIik7XHJcbiAgICAkLmdldEpTT04oXCJhc3NldHMvZGF0YS9ldmVudHMuanNvblwiKS5kb25lKCBmdW5jdGlvbihqRGF0YSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhqRGF0YSk7XHJcbiAgICAgIC8vcHV0IHRoZSBqRGF0YSBvYmplY3RzIGludG8gbG9jYWxTdG9yYWdlXHJcbiAgICAgIGpEYXRhID0gSlNPTi5zdHJpbmdpZnkoakRhdGEpO1xyXG4gICAgICBsb2NhbFN0b3JhZ2UuZXZlbnRzID0gakRhdGE7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwibG9jYWxTdG9yYWdlLmV2ZW50cyBzdWNjZXNzZnVsbHkgcG9wdWxhdGVkXCIpO1xyXG4gICAgICBpbml0UG9wRGF0YSgpO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmIChsb2NhbFN0b3JhZ2UuZXZlbnRzKSB7XHJcbiAgICAvL2xvYWQgZXZlcnl0aGluZyBmcm9tIGxvY2Fsc3RvcmFnZSBhbmQgcG9wdWxhdGUgdGhlIGRpdiB3aXRoIGRhdGEuLlxyXG4gICAgY29uc29sZS5sb2coXCJsb2NhbFN0b3JhZ2UuZXZlbnRzIGhhcyBkYXRhXCIpO1xyXG4gICAgaW5pdFBvcERhdGEoKTtcclxuICB9XHJcblxyXG4vL0MgZnJvbSBDUlVEIC0gb25DbGljayAjc2F2ZS1idG4gLSBzYXZlIGRhdGEgZnJvbSBpbnRlcmZhY2UgdG8gbG9jYWxTdG9yYWdlXHJcbiAgJChcIiNjcmVhdGUtZXZlbnQtYnRuXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcInNhdmUtYnRuIGNsaWNrZWRcIik7XHJcbiAgICAvL2dldCB2YWx1ZSBvZiBhbGwgaXRlbXMuLlxyXG4gICAgdmFyIHNJZCA9IG5ldyBEYXRlKCk7XHJcbiAgICBzSWQgPSBzSWQudmFsdWVPZigpO1xyXG4gICAgdmFyIHNOYW1lID0gJChcIiN3ZHctZXZlbnQtY3JlYXRlXCIpLmZpbmQoXCJpbnB1dFtuYW1lPSdldmVudC1uYW1lJ11cIikudmFsKCk7XHJcbiAgICB2YXIgc1RvcGljcyA9ICQoXCIjd2R3LWV2ZW50LWNyZWF0ZVwiKS5maW5kKFwiaW5wdXRbbmFtZT0nZXZlbnQtdG9waWNzJ11cIikudmFsKCk7XHJcbiAgICB2YXIgc0xldmVsID0gJChcIiN3ZHctZXZlbnQtY3JlYXRlXCIpLmZpbmQoXCJpbnB1dFtuYW1lPSdldmVudC1sZXZlbCddXCIpLnZhbCgpO1xyXG4gICAgdmFyIHNTcGVha2VyID0gJChcIiN3ZHctZXZlbnQtY3JlYXRlXCIpLmZpbmQoXCJpbnB1dFtuYW1lPSdldmVudC1zcGVha2VyJ11cIikudmFsKCk7XHJcbiAgICB2YXIgc1NwZWFrZXJPcmcgPSAkKFwiI3dkdy1ldmVudC1jcmVhdGVcIikuZmluZChcImlucHV0W25hbWU9J2V2ZW50LXNwZWFrZXItb3JnJ11cIikudmFsKCk7XHJcbiAgICB2YXIgZERhdGUgPSBuZXcgRGF0ZSgkKFwiI3dkdy1ldmVudC1jcmVhdGVcIikuZmluZChcImlucHV0W25hbWU9J2V2ZW50LWRhdGUnXVwiKS52YWwoKSk7XHJcbiAgICB2YXIgc1RpbWUgPSAkKFwiI3dkdy1ldmVudC1jcmVhdGVcIikuZmluZChcImlucHV0W25hbWU9J2V2ZW50LXRpbWUnXVwiKS52YWwoKTtcclxuICAgIHZhciBzSW5mbyA9ICQoXCIjd2R3LWV2ZW50LWNyZWF0ZVwiKS5maW5kKFwiaW5wdXRbbmFtZT0nZXZlbnQtaW5mbyddXCIpLnZhbCgpOyAvL2luZm9cclxuICAgIGNvbnNvbGUubG9nKGFUaW1lKTtcclxuICAgIFxyXG4gICAgdmFyIGFUb3BpY3MgPSBbXTtcclxuICAgIC8vZ2V0IGVhY2ggdG9waWMgYW5kIHN0b3JlIGl0IGluIGFuIGFycmF5XHJcbiAgICB2YXIgYVRvcGljcyA9IHNUb3BpY3Muc3BsaXQoXCIsXCIpO1xyXG4gICAgY29uc29sZS5sb2coYVRvcGljcyk7XHJcbiAgICBcclxuICAgIGZvciAoaSA9IDA7IGkgPCBhVG9waWNzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChhVG9waWNzW2ldLmNoYXJBdCgwKSA9PSBcIiBcIikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZmlyc3QgY2hhcjogXCIgKyBhVG9waWNzW2ldLmNoYXJBdCgwKSk7XHJcbiAgICAgICAgYVRvcGljc1tpXSA9IGFUb3BpY3NbaV0uc2xpY2UoMSwgYVRvcGljc1tpXS5sZW5ndGgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwic3RyIG5vdyBlcXVhbHMgXCIgKyBhVG9waWNzW2ldKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKGFUb3BpY3NbaV0uY2hhckF0KGFUb3BpY3NbaV0ubGVuZ3RoIC0gMSkgPT0gXCIgXCIpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImxhc3QgY2hhcjogXCIgKyBhVG9waWNzW2ldLmNoYXJBdCgwKSk7XHJcbiAgICAgICAgYVRvcGljc1tpXSA9IGFUb3BpY3NbaV0uc2xpY2UoMCwgYVRvcGljc1tpXS5sZW5ndGgtMSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJzdHIgbm93IGVxdWFscyBcIiArIGFUb3BpY3NbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKGFUb3BpY3MpO1xyXG4gICAgXHJcbiAgICAvL3NldCB0aW1lLCBpZiBpbnB1dCBtYWtlIHNlbnNlXHJcbiAgICB2YXIgYVRpbWUgPSBzVGltZS5zcGxpdChcIjpcIiwgMik7IC8vc3BsaXQgc1RpbWUgaW50byBhcnJheSB3aXRoIHR3byB2YXJzXHJcbiAgICBhVGltZS5mb3JFYWNoKCBmdW5jdGlvbihpKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiYVRpbWUgRm9yZWFjaFwiKTtcclxuICAgICAgY29uc29sZS5sb2coaS5sZW5ndGgpO1xyXG4gICAgICBpZiAoaS5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coaSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJJbnZhbGlkIHRpbWVcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IGVsc2UgaWYgKGkubGVuZ3RoIDw9IDIpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSBhVGltZS5pbmRleE9mKGkpO1xyXG4gICAgICAgIGlmIChpbmRleCA9PSAwKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhpKTtcclxuICAgICAgICAgIGREYXRlLnNldEhvdXJzKGkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT0gMSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coaSk7XHJcbiAgICAgICAgICBkRGF0ZS5zZXRNaW51dGVzKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zb2xlLmxvZyhkRGF0ZSk7XHJcbiAgICBcclxuICAgIC8vY3JlYXRlIG9iamVjdCB0byBwdXNoIGludG8gSlNPTi4uXHJcbiAgICB2YXIgakV2ZW50T2JqID0ge1xyXG4gICAgICBpZDogc0lkLFxyXG4gICAgICBuYW1lOiBzTmFtZSxcclxuICAgICAgdG9waWM6IGFUb3BpY3MsXHJcbiAgICAgIGxldmVsOiBzTGV2ZWwsXHJcbiAgICAgIHNwZWFrZXI6IHNTcGVha2VyLFxyXG4gICAgICBzcGVha2VyX29yZ2FuaXphdGlvbjogc1NwZWFrZXJPcmcsXHJcbiAgICAgIGRhdGU6IHsgZGF5OiBkRGF0ZS5nZXREYXRlKCksIG1vbnRoOiBkRGF0ZS5nZXRNb250aCgpICwgeWVhcjogZERhdGUuZ2V0RnVsbFllYXIoKSB9LFxyXG4gICAgICB0aW1lXzI0aDogeyBob3VyOiBkRGF0ZS5nZXRIb3VycygpICwgbWludXRlOiBkRGF0ZS5nZXRNaW51dGVzKCkgfSxcclxuICAgICAgaW5mbzogc0luZm8sXHJcbiAgICAgIHBhc3Q6IGZhbHNlXHJcbiAgICB9O1xyXG4gICAgY29uc29sZS5sb2coakV2ZW50T2JqKTtcclxuICAgIFxyXG4gICAgLy9wdXNoIGpFdmVudE9iaiB0byBsb2NhbFN0b3JhZ2VcclxuICAgIHZhciBsb2NhbFRlbXAgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5ldmVudHMpO1xyXG4gICAgbG9jYWxUZW1wLnB1c2goakV2ZW50T2JqKTtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCBcImV2ZW50c1wiICwgSlNPTi5zdHJpbmdpZnkobG9jYWxUZW1wKSApO1xyXG4gICAgXHJcbiAgICAvL2FwcGVuZCBuZXdseSBhZGRlZCBkYXRhIHRvIERPTS4uXHJcbiAgICAkKFwiI2V2ZW50LWxpc3RpbmdcIikuYXBwZW5kKCc8dHIgZGF0YS1ldmVudC1pZD1cIicgKyBqRXZlbnRPYmouaWQgKyAnXCI+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkPicgKyBqRXZlbnRPYmoubmFtZSArICc8L3RkPlxcXHJcblx0XHRcdFx0XHRcdFx0XHRcdDx0ZD4nICsgakV2ZW50T2JqLnRvcGljICsgJzwvdGQ+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkPicgKyBqRXZlbnRPYmouc3BlYWtlciArICc8L3RkPlxcXHJcblx0XHRcdFx0XHRcdFx0XHRcdDx0ZD4nICsgakV2ZW50T2JqLmRhdGUuZGF5ICsgJyAnICsgakV2ZW50T2JqLmRhdGUubW9udGggKyAnICcgKyBqRXZlbnRPYmouZGF0ZS55ZWFyICsgJzwvdGQ+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkPicgKyBqRXZlbnRPYmoudGltZV8yNGguaG91ciArICc6JyArIGpFdmVudE9iai50aW1lXzI0aC5taW51dGUgKyAnPC90ZD5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQ+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8aSBjbGFzcz1cImZhIGZhLXBlbmNpbFwiIGlkPVwiZWRpdC1ldmVudC1pY29uXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxcXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGkgY2xhc3M9XCJmYSBmYS10cmFzaFwiIGlkPVwiZGVsZXRlLWV2ZW50LWljb25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0PC90ZD5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cXFxyXG5cdCcpO1xyXG4gIH0pO1xyXG5cclxuLy9VIGZyb20gQ1JVRCAtIG9uQ2xpY2sgLmZhLWVkaXQgLSBvcGVuIGVkaXRpbmcgaW50ZXJmYWNlXHJcbiAgJChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcIiNlZGl0LWV2ZW50LWljb25cIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIi5mYS1wZW5jaWwgaWNvbiBjbGlja2VkXCIpO1xyXG4gICAgLy9nZXQgdHIgaWQgb2YgLmZhLXBlbmNpbCBwYXJlbnRcclxuICAgIHZhciBzRGF0YUlkID0gJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5kYXRhKFwiZXZlbnQtaWRcIik7XHJcbiAgICAvL2dpdmUgaWQgYSB2YWx1ZVxyXG4gICAgJChcIiN3ZHctZXZlbnQtdXBkYXRlXCIpLmF0dHIoXCJkYXRhLWV2ZW50LWlkXCIsIHNEYXRhSWQpO1xyXG4gICAgLy9hY2Nlc3MgbG9jYWxTdG9yYWdlLmV2ZW50XHJcbiAgICB2YXIgbG9jYWxUZW1wID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZXZlbnRzKTtcclxuICAgIC8vZmluZCB0aGUgbG9jYWxUZW1wLmlkID09IHNEYXRhSWRcclxuICAgIGxvY2FsVGVtcC5mb3JFYWNoKCBmdW5jdGlvbihqKSB7XHJcbiAgICAgIC8vZmluZCBieSB1bmlxdWUgaWRcclxuICAgICAgaWYgKGouaWQgPT0gc0RhdGFJZCkge1xyXG4gICAgICAgIC8vc2V0ICN3ZHctZXZlbnQtdXBkYXRlIGF0dHIgdG8gZXF1YWwgc0RhdGFJZFxyXG4gICAgICAgIC8vQkVHSU4gc3RydWdnbGUgd2l0aCBzYXRhbidzIGZhcnQgc3RlbmNoXHJcbiAgICAgICAgdmFyIGREYXRlID0gai5kYXRlLnllYXIgKyBcIi1cIiArIGouZGF0ZS5tb250aCArIFwiLVwiICsgai5kYXRlLmRheTtcclxuICAgICAgICB2YXIgYURhdGUgPSBkRGF0ZS5zcGxpdChcIi1cIik7XHJcbiAgICAgICAgLy9kYXRlIHByb3BlcnR5IHZhcmlhYmxlc1xyXG4gICAgICAgIHZhciBzTW9udGggPSBcIlwiO1xyXG4gICAgICAgIHZhciBzRGF5ID0gXCJcIjtcclxuICAgICAgICBpZiAoYURhdGVbMV0ubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIHZhciB0ZW1wID0gYURhdGVbMV0udG9TdHJpbmcoKTtcclxuICAgICAgICAgIHZhciB6ZXJvID0gXCIwXCJcclxuICAgICAgICAgIHZhciBzdHIgPSB6ZXJvLmNvbmNhdCh0ZW1wKTtcclxuICAgICAgICAgIGFEYXRlWzFdID0gc3RyO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYURhdGVbMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYURhdGVbMl0ubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIHZhciB0ZW1wID0gYURhdGVbMl0udG9TdHJpbmcoKTtcclxuICAgICAgICAgIHZhciB6ZXJvID0gXCIwXCJcclxuICAgICAgICAgIHZhciBzdHIgPSB6ZXJvLmNvbmNhdCh0ZW1wKTtcclxuICAgICAgICAgIGFEYXRlWzJdID0gc3RyO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYURhdGVbMl0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZERhdGUgPSBqLmRhdGUueWVhciArIFwiLVwiICsgYURhdGVbMV0gKyBcIi1cIiArIGFEYXRlWzJdO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGREYXRlKTtcclxuICAgICAgICAvL0VORCBzdHJ1Z2dsZSB3aXRoIHNhdGFuJ3MgZmFydCBzdGVuY2guIEdvZCBpcyBnb29kLlxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vaW1wb3J0IGFsbCBpbnB1dCB2YWx1ZXMgZnJvbSBsb2NhbFRlbXAgb2JqZWN0IHRvIERPTVxyXG4gICAgICAgICQoXCIjd2R3LWV2ZW50LXVwZGF0ZVwiKS5maW5kKFwiaW5wdXRbbmFtZT0nZXZlbnQtbmFtZSddXCIpLnZhbChqLm5hbWUpO1xyXG4gICAgICAgICQoXCIjd2R3LWV2ZW50LXVwZGF0ZVwiKS5maW5kKFwiaW5wdXRbbmFtZT0nZXZlbnQtdG9waWNzJ11cIikudmFsKGoudG9waWMpO1xyXG4gICAgICAgICQoXCIjd2R3LWV2ZW50LXVwZGF0ZVwiKS5maW5kKFwiaW5wdXRbbmFtZT0nZXZlbnQtbGV2ZWwnXVwiKS52YWwoai5sZXZlbCk7XHJcbiAgICAgICAgJChcIiN3ZHctZXZlbnQtdXBkYXRlXCIpLmZpbmQoXCJpbnB1dFtuYW1lPSdldmVudC1zcGVha2VyJ11cIikudmFsKGouc3BlYWtlcik7XHJcbiAgICAgICAgJChcIiN3ZHctZXZlbnQtdXBkYXRlXCIpLmZpbmQoXCJpbnB1dFtuYW1lPSdldmVudC1zcGVha2VyLW9yZyddXCIpLnZhbChqLnNwZWFrZXJfb3JnYW5pemF0aW9uKTtcclxuICAgICAgICAvL1NFRSBORVhUIExJTkUgRk9SIFdPUktJTkcgVkVSU0lPTiAtIE5BVElWRSBKUyAkKFwiI3dkdy1ldmVudC1lZGl0XCIpLmZpbmQoXCJpbnB1dFtuYW1lPSdldmVudC1kYXRlJ11cIikudmFsKGREYXRlKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVkaXQtZXZlbnQtZGF0ZVwiKS52YWx1ZSA9IGREYXRlO1xyXG4gICAgICAgICQoXCIjd2R3LWV2ZW50LXVwZGF0ZVwiKS5maW5kKFwiaW5wdXRbbmFtZT0nZXZlbnQtdGltZSddXCIpLnZhbChqLnRpbWVfMjRoLmhvdXIgKyBcIjpcIiArIGoudGltZV8yNGgubWludXRlKTtcclxuICAgICAgICAkKFwiI3dkdy1ldmVudC11cGRhdGVcIikuZmluZChcImlucHV0W25hbWU9J2V2ZW50LWluZm8nXVwiKS52YWwoai5pbmZvKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4vL1UgZnJvbSBDUlVEIC0gb25DbGljayAjdXBkYXRlLWV2ZW50LWJ0biAtIHNhdmUgZGF0YSBmcm9tIGVkaXRpbmcgaW50ZXJmYWNlXHJcbiAgJChcIiN1cGRhdGUtZXZlbnQtYnRuXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIiN1cGRhdGUtZXZlbnQgY2xpY2tlZFwiKTtcclxuICAgIC8vZ2V0IHZhbHVlIG9mIGFsbCBpdGVtcy4uXHJcbiAgICB2YXIgc0lkID0gJChcIiN3ZHctZXZlbnQtdXBkYXRlXCIpLmF0dHIoXCJkYXRhLWV2ZW50LWlkXCIpOyAvL2dldCBmcm9tIERPTVxyXG4gICAgdmFyIHNOYW1lID0gJChcIiN3ZHctZXZlbnQtdXBkYXRlXCIpLmZpbmQoXCJpbnB1dFtuYW1lPSdldmVudC1uYW1lJ11cIikudmFsKCk7XHJcbiAgICB2YXIgc1RvcGljcyA9ICQoXCIjd2R3LWV2ZW50LXVwZGF0ZVwiKS5maW5kKFwiaW5wdXRbbmFtZT0nZXZlbnQtdG9waWNzJ11cIikudmFsKCk7XHJcbiAgICB2YXIgc0xldmVsID0gJChcIiN3ZHctZXZlbnQtdXBkYXRlXCIpLmZpbmQoXCJpbnB1dFtuYW1lPSdldmVudC1sZXZlbCddXCIpLnZhbCgpO1xyXG4gICAgdmFyIHNTcGVha2VyID0gJChcIiN3ZHctZXZlbnQtdXBkYXRlXCIpLmZpbmQoXCJpbnB1dFtuYW1lPSdldmVudC1zcGVha2VyJ11cIikudmFsKCk7XHJcbiAgICB2YXIgc1NwZWFrZXJPcmcgPSAkKFwiI3dkdy1ldmVudC11cGRhdGVcIikuZmluZChcImlucHV0W25hbWU9J2V2ZW50LXNwZWFrZXItb3JnJ11cIikudmFsKCk7XHJcbiAgICB2YXIgZERhdGUgPSBuZXcgRGF0ZSgkKFwiI3dkdy1ldmVudC11cGRhdGVcIikuZmluZChcImlucHV0W25hbWU9J2V2ZW50LWRhdGUnXVwiKS52YWwoKSk7XHJcbiAgICB2YXIgc1RpbWUgPSAkKFwiI3dkdy1ldmVudC11cGRhdGVcIikuZmluZChcImlucHV0W25hbWU9J2V2ZW50LXRpbWUnXVwiKS52YWwoKTtcclxuICAgIHZhciBzSW5mbyA9ICQoXCIjd2R3LWV2ZW50LXVwZGF0ZVwiKS5maW5kKFwiaW5wdXRbbmFtZT0nZXZlbnQtaW5mbyddXCIpLnZhbCgpOyAvL2luZm9cclxuICAgIGNvbnNvbGUubG9nKGFUaW1lKTtcclxuICAgIFxyXG4gICAgdmFyIGFUb3BpY3MgPSBbXTtcclxuICAgIC8vZ2V0IGVhY2ggdG9waWMgYW5kIHN0b3JlIGl0IGluIGFuIGFycmF5XHJcbiAgICB2YXIgYVRvcGljcyA9IHNUb3BpY3Muc3BsaXQoXCIsXCIpO1xyXG4gICAgY29uc29sZS5sb2coYVRvcGljcyk7XHJcbiAgICBcclxuICAgIGZvciAoaSA9IDA7IGkgPCBhVG9waWNzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChhVG9waWNzW2ldLmNoYXJBdCgwKSA9PSBcIiBcIikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZmlyc3QgY2hhcjogXCIgKyBhVG9waWNzW2ldLmNoYXJBdCgwKSk7XHJcbiAgICAgICAgYVRvcGljc1tpXSA9IGFUb3BpY3NbaV0uc2xpY2UoMSwgYVRvcGljc1tpXS5sZW5ndGgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwic3RyIG5vdyBlcXVhbHMgXCIgKyBhVG9waWNzW2ldKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKGFUb3BpY3NbaV0uY2hhckF0KGFUb3BpY3NbaV0ubGVuZ3RoIC0gMSkgPT0gXCIgXCIpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImxhc3QgY2hhcjogXCIgKyBhVG9waWNzW2ldLmNoYXJBdCgwKSk7XHJcbiAgICAgICAgYVRvcGljc1tpXSA9IGFUb3BpY3NbaV0uc2xpY2UoMCwgYVRvcGljc1tpXS5sZW5ndGgtMSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJzdHIgbm93IGVxdWFscyBcIiArIGFUb3BpY3NbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhhVG9waWNzKTtcclxuICAgIFxyXG4gICAgLy9zZXQgdGltZSwgaWYgaW5wdXQgbWFrZSBzZW5zZVxyXG4gICAgdmFyIGFUaW1lID0gc1RpbWUuc3BsaXQoXCI6XCIsIDIpOyAvL3NwbGl0IHNUaW1lIGludG8gYXJyYXkgd2l0aCB0d28gdmFyc1xyXG4gICAgYVRpbWUuZm9yRWFjaCggZnVuY3Rpb24oaSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcImFUaW1lIEZvcmVhY2hcIik7XHJcbiAgICAgIGNvbnNvbGUubG9nKGkubGVuZ3RoKTtcclxuICAgICAgaWYgKGkubGVuZ3RoID4gMikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiSW52YWxpZCB0aW1lXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfSBlbHNlIGlmIChpLmxlbmd0aCA8PSAyKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gYVRpbWUuaW5kZXhPZihpKTtcclxuICAgICAgICBpZiAoaW5kZXggPT0gMCkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coaSk7XHJcbiAgICAgICAgICBkRGF0ZS5zZXRIb3VycyhpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09IDEpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGkpO1xyXG4gICAgICAgICAgZERhdGUuc2V0TWludXRlcyhpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc29sZS5sb2coZERhdGUpO1xyXG4gICAgXHJcbiAgICAvL2NyZWF0ZSBvYmplY3QgdG8gcHVzaCBpbnRvIEpTT04uLlxyXG4gICAgdmFyIGpFdmVudE9iaiA9IHtcclxuICAgICAgaWQ6IHNJZCxcclxuICAgICAgbmFtZTogc05hbWUsXHJcbiAgICAgIHRvcGljOiBhVG9waWNzLFxyXG4gICAgICBsZXZlbDogc0xldmVsLFxyXG4gICAgICBzcGVha2VyOiBzU3BlYWtlcixcclxuICAgICAgc3BlYWtlcl9vcmdhbml6YXRpb246IHNTcGVha2VyT3JnLFxyXG4gICAgICBkYXRlOiB7IGRheTogZERhdGUuZ2V0RGF0ZSgpLCBtb250aDogZERhdGUuZ2V0TW9udGgoKSAsIHllYXI6IGREYXRlLmdldEZ1bGxZZWFyKCkgfSxcclxuICAgICAgdGltZV8yNGg6IHsgaG91cjogZERhdGUuZ2V0SG91cnMoKSAsIG1pbnV0ZTogZERhdGUuZ2V0TWludXRlcygpIH0sXHJcbiAgICAgIGluZm86IHNJbmZvLFxyXG4gICAgICBwYXN0OiBmYWxzZVxyXG4gICAgfTtcclxuICAgIGNvbnNvbGUubG9nKGpFdmVudE9iaik7XHJcbiAgICBcclxuICAgIC8vcHVzaCBqRXZlbnRPYmogdG8gbG9jYWxTdG9yYWdlXHJcbiAgICB2YXIgbG9jYWxUZW1wID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZXZlbnRzKTtcclxuICAgIC8vZmluZCB0aGUgb2JqZWN0IGluIEpTT05cclxuICAgIGxvY2FsVGVtcC5mb3JFYWNoKGZ1bmN0aW9uKGopIHtcclxuICAgICAgLy9maW5kIG9iamVjdCB3aXRoIG1hdGNoaW5nIGlkXHJcbiAgICAgIGlmIChqLmlkID09IGpFdmVudE9iai5pZCkge1xyXG4gICAgICAgIC8vcmVtb3ZlIG9iamVjdCB3aXRoIG1hdGNoaW5nIGlkXHJcbiAgICAgICAgbG9jYWxUZW1wLnNwbGljZSggbG9jYWxUZW1wLmluZGV4T2YoaiksIDEgKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvL3B1c2ggakV2ZW50T2JqIHRvIGxvY2FsVGVtcFxyXG4gICAgbG9jYWxUZW1wLnB1c2goakV2ZW50T2JqKTtcclxuICAgIC8vcmV3cml0ZSBsb2NhbFN0b3JhZ2VcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCBcImV2ZW50c1wiICwgSlNPTi5zdHJpbmdpZnkobG9jYWxUZW1wKSApO1xyXG4gICAgLy9yZW1vdmUgZGF0YSBhdHRyIGZyb20gd2luZG93XHJcbiAgICAkKFwiI3dkdy1ldmVudC11cGRhdGVcIikuYXR0cihcImRhdGEtZXZlbnQtaWRcIiwgXCJcIik7XHJcbiAgICAvL2RlbGV0ZSBvbGQgRE9NIHJlcHJlc2VudGF0aW9uXHJcbiAgICAkKGRvY3VtZW50KS5maW5kKCdbZGF0YS1ldmVudC1pZD0nK2pFdmVudE9iai5pZCsnXScpLnJlbW92ZSgpO1xyXG4gICAgLy9hcHBlbmQgbmV3IERPTSByZXByZXNlbnRhdGlvblxyXG4gICAgJChcIiNldmVudC1saXN0aW5nIHRib2R5XCIpLnByZXBlbmQoJzx0ciBkYXRhLWV2ZW50LWlkPVwiJyArIGpFdmVudE9iai5pZCArICdcIj5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQ+JyArIGpFdmVudE9iai5uYW1lICsgJzwvdGQ+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkPicgKyBqRXZlbnRPYmoudG9waWMgKyAnPC90ZD5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQ+JyArIGpFdmVudE9iai5zcGVha2VyICsgJzwvdGQ+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkPicgKyBqRXZlbnRPYmouZGF0ZS5kYXkgKyAnICcgKyBqRXZlbnRPYmouZGF0ZS5tb250aCArICcgJyArIGpFdmVudE9iai5kYXRlLnllYXIgKyAnPC90ZD5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQ+JyArIGpFdmVudE9iai50aW1lXzI0aC5ob3VyICsgJzonICsgakV2ZW50T2JqLnRpbWVfMjRoLm1pbnV0ZSArICc8L3RkPlxcXHJcblx0XHRcdFx0XHRcdFx0XHRcdDx0ZD5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxpIGNsYXNzPVwiZmEgZmEtcGVuY2lsXCIgaWQ9XCJlZGl0LWV2ZW50LWljb25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8aSBjbGFzcz1cImZhIGZhLXRyYXNoXCIgaWQ9XCJkZWxldGUtZXZlbnQtaWNvblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L3RkPlxcXHJcblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxcXHJcblx0Jyk7XHJcbiAgfSk7XHJcblxyXG4vL1UgZnJvbSBDUlVEIC0gb25DbGljayAjY2FuY2VsLXVwZGF0ZS1ldmVudC1idG4gLSBjYW5jZWxcclxuICAkKFwiI2NhbmNlbC11cGRhdGUtZXZlbnQtYnRuXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAvL3NldCAjd2R3LWV2ZW50LXVwZGF0ZSdzIGRhdGEtZXZlbnQtaWQgPT0gXCJcIjtcclxuICAgICQoXCIjd2R3LWV2ZW50LXVwZGF0ZVwiKS5hdHRyKFwiZGF0YS1ldmVudC1pZFwiLCBcIlwiKTtcclxuICB9KTtcclxuXHJcbi8vRCBmcm9tIENSVUQgLSBvbkNsaWNrIC5mYS10cmFzaCAtIGRlbGV0ZSBmcm9tIGludGVyZmFjZSBhbmQgbG9jYWxzdG9yYWdlXHJcbiAgJChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcIiNkZWxldGUtZXZlbnQtaWNvblwiLCBmdW5jdGlvbigpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiLmZhLXRyYXNoIGljb24gY2xpY2tlZFwiKTtcclxuICAgIC8vZ2V0IHRyIGlkIG9mIC5mYS10cmFzaCBwYXJlbnRcclxuICAgIHZhciBzRGF0YUlkID0gJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5kYXRhKFwiZXZlbnQtaWRcIik7XHJcbiAgICAvL2FjY2VzcyBsb2NhbFN0b3JhZ2UuZXZlbnRcclxuICAgIHZhciBsb2NhbFRlbXAgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5ldmVudHMpO1xyXG4gICAgLy9maW5kIHRoZSBsb2NhbFRlbXAuaWQgPT0gc0RhdGFJZFxyXG4gICAgbG9jYWxUZW1wLmZvckVhY2goIGZ1bmN0aW9uKGopIHtcclxuICAgICAgaWYgKGouaWQgPT0gc0RhdGFJZCkge1xyXG4gICAgICAgIC8vcmVtb3ZlIGl0ZW0gZnJvbSBsb2NhbFRlbXBcclxuICAgICAgICBcclxuICAgICAgICBsb2NhbFRlbXAuc3BsaWNlKCBsb2NhbFRlbXAuaW5kZXhPZihqKSwgMSApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiSUQgXCIgKyBqLmlkICsgXCJzcGxpY2VkIGZyb20gbG9jYWxUZW1wXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKGxvY2FsVGVtcCk7XHJcbiAgICBsb2NhbFN0b3JhZ2UuZXZlbnRzID0gSlNPTi5zdHJpbmdpZnkobG9jYWxUZW1wKTtcclxuICAgIC8vZGVsZXRlIHRyIGJ5IGlkXHJcbiAgICAkKGRvY3VtZW50KS5maW5kKCdbZGF0YS1ldmVudC1pZD0nK3NEYXRhSWQrJ10nKS5yZW1vdmUoKTtcclxuICB9KTtcclxuXHJcbi8vZnVuY3Rpb25zXHJcbi8vcG9wdWxhdGUgZGF0YSBvbiBwYWdlbG9hZFxyXG4gIGZ1bmN0aW9uIGluaXRQb3BEYXRhKCkge1xyXG4gICAgLy9zaW5jZSBsb2NhbHN0b3JhZ2Ugd2lsbCBhbHdheXMgaGF2ZSB2YWx1ZXMsXHJcbiAgICAvL2FwcGVuZCBhbGwgb2YgbG9jYWxzdG9yYWdlJ3MgY29udGVudCB0byB0aGUgY29ycmVzcG9uZGluZyB0YWJsZVxyXG4gICAgdmFyIGpFdmVudHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5ldmVudHMpO1xyXG4gICAgakV2ZW50cy5mb3JFYWNoKCBmdW5jdGlvbihqKSB7XHJcbiAgICAgICQoXCIjZXZlbnQtbGlzdGluZyB0Ym9keVwiKS5hcHBlbmQoJzx0ciBkYXRhLWV2ZW50LWlkPVwiJyArIGouaWQgKyAnXCI+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8dGQ+JyArIGoubmFtZSArICc8L3RkPlxcXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PHRkPicgKyBqLnRvcGljICsgJzwvdGQ+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8dGQ+JyArIGouc3BlYWtlciArICc8L3RkPlxcXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PHRkPicgKyBqLmRhdGUuZGF5ICsgJyAnICsgai5kYXRlLm1vbnRoICsgJyAnICsgai5kYXRlLnllYXIgKyAnPC90ZD5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDx0ZD4nICsgai50aW1lXzI0aC5ob3VyICsgJzonICsgai50aW1lXzI0aC5taW51dGUgKyAnPC90ZD5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDx0ZD5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGkgY2xhc3M9XCJmYSBmYS1wZW5jaWxcIiBpZD1cImVkaXQtZXZlbnQtaWNvblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cXFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGkgY2xhc3M9XCJmYSBmYS10cmFzaFwiIGlkPVwiZGVsZXRlLWV2ZW50LWljb25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XFxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3RkPlxcXHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvdHI+XFxcclxuXHRcdFx0Jyk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgLy9IaWRlL1Nob3cgLSBXZHdcclxuICBmdW5jdGlvbiBoaWRlV2luZG93c0FuZFNob3dPbmVXaW5kb3coc1dpbmRvd0lkKSB7XHJcbiAgICAvLyAkKCcud2R3JykuaGlkZSgpO1xyXG4gICAgJCgnLndkdycpLmZhZGVPdXQoMzAwKTsgLy9mYWRlb3V0IDUwMFxyXG4gICAgLy8gJCgnIycgKyBzV2luZG93SWQpLnNob3coKTtcclxuICAgICQoJyMnICsgc1dpbmRvd0lkKS5mYWRlSW4oMzAwKTsgLy8gZmFkZSBpbiA1MDBcclxuICB9XHJcbiAgXHJcbiAgXHJcbiAgXHJcbiAgLy9TdG9yaW5nIGV2ZW50c1xyXG4gIHZhciBhRXZlbnRzID0gW107XHJcbiAgXHJcbiAgXHJcbiAgaWYgKGxvY2FsU3RvcmFnZS5zRXZlbnRzKSB7XHJcbiAgICAvLyByZWFkIHRoZSB0ZXh0IGZyb20gdGhlIGxvY2FsIHN0b3JhZ2VcclxuICAgIC8vIGNvbnZlcnQgdGhhdCB0ZXh0IGludG8gYW4gb2JqZWN0XHJcbiAgICB2YXIgc0V2ZW50c0Zyb21Mb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2Uuc0V2ZW50cztcclxuICAgIGFFdmVudHMgPSBKU09OLnBhcnNlKHNFdmVudHNGcm9tTG9jYWxTdG9yYWdlKTtcclxuICB9XHJcbiAgXHJcbiAgXHJcbiAgXHJcbiAgJChmdW5jdGlvbiAoKSB7IC8vUGVyZm9ybWFuY2UgaW4gaGVyZSAtLT4gbG9hZCBhc3luYyBmaXJzdCBwcmlvcml0eVxyXG4gICAgLy8gRmFzdFNoZWxsXHJcbiAgfSk7XHJcbiAgXHJcbiAgXHJcbiAgXHJcbiAgXHJcbiAgLy9BZGRzIGV2ZW50cyB0byBzZWFyY2ggIHNjaGVkdWxlIGNhbGVuZGFyXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhRXZlbnRzLmxlbmd0aDsgaSsrKSB7ICAvL3RlbXBsYXRpbmdcclxuICAgIC8vYXBwZW5kXHJcbiAgICAkKCcjbGJsRXZlbnRzJykuYXBwZW5kKFxyXG4gICAgICAnPHRyPicgK1xyXG4gICAgICAnPHRoIHNjb3BlPVwicm93XCI+JysnPGg0PicrYUV2ZW50c1tpXS5pZCsnPC9oND4nKyc8L3RoPicrXHJcbiAgICAgICc8dGQ+JysnPGg0PicrYUV2ZW50c1tpXS5uYW1lKyc8L2g0PicrJzwvdGQ+JytcclxuICAgICAgLy8nPHRkIGNsYXNzPVwiZXZlbnRQcmljZVwiPicrZXZlbnRQcmljZUNoYW5nZSsnPC90ZD4nK1xyXG4gICAgICAnPHRkPjxpIGNsYXNzPVwiZmEgZmEtdHJhc2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+PC90ZD4nK1xyXG4gICAgICAnPC90cj4nKTtcclxuICB9XHJcbiAgXHJcbiAgXHJcbiAgLy9BZGQgbmV3IEV2ZW50XHJcbiAgJCgnI3Bvc3RidG4nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgdmFyIHNFdmVudElkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICB2YXIgc0ltYWdlVXJsID0gJCgnI2lucHV0cG9zdGltZycpLnZhbCgpO1xyXG4gICAgdmFyIHNwb3N0ZXZlbnQgPSAkKCcjaW5wdXRwb3N0ZXZlbnQnKS52YWwoKTtcclxuICAgIHZhciBzUG9zdERlc2MgPSAkKCcjaW5wdXRwb3N0ZGVzYycpLnZhbCgpO1xyXG4gICAgdmFyIHNQb3N0TG9jYXRpb24gPSAkKCcjaW5wdXRwb3N0bG9jYXRpb24nKS52YWwoKTtcclxuICAgIHZhciBzTGluayA9IFwibGlua1wiO1xyXG4gICAgXHJcbiAgICAvL2NvbnNvbGUubG9nKHNJbWFnZVVybCArIHNwb3N0dGl0ZWwgKyBzUG9zdERlc2MgKyBzUG9zdExvY2F0aW9uKTtcclxuICAgIC8vQmVmb3JlIC5jYWxlbmRhci1iYWNrXHJcbiAgICAkKCcjbGJsRXZlbnRzJykuYXBwZW5kKFxyXG4gICAgICAnPHRyPicgK1xyXG4gICAgICAnPHRkPicrc3Bvc3RldmVudCsnPC90ZD4nK1xyXG4gICAgICAnPHRkPicrc1Bvc3RMb2NhdGlvbisnPC90ZD4nK1xyXG4gICAgICAnPHRkPicrc0V2ZW50SWQrJzwvdGQ+JytcclxuICAgICAgJzx0ZD4nK3NMaW5rKyc8L3RkPicrXHJcbiAgICAgICc8dGQ+PGkgY2xhc3M9XCJmYSBmYS10cmFzaFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT48L3RkPicrXHJcbiAgICAgICc8L3RyPicpO1xyXG4gICAgXHJcbiAgICBoaWRlV2luZG93c0FuZFNob3dPbmVXaW5kb3coJ3dkdy1jYWxlbmRhcicpO1xyXG4gICAgXHJcbiAgICBcclxuICAgIHZhciBqRXZlbnQgPSB7fTtcclxuICAgIGpFdmVudC5pZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgakV2ZW50LmltYWdlVXJsID0gc0ltYWdlVXJsO1xyXG4gICAgakV2ZW50LnBvc3RldmVudCA9IHNwb3N0ZXZlbnQ7XHJcbiAgICBqRXZlbnQuUG9zdERlc2MgPSBzUG9zdERlc2M7XHJcbiAgICBqRXZlbnQuc1Bvc3RMb2NhdGlvbiA9IHNQb3N0TG9jYXRpb247XHJcbiAgICBhRXZlbnRzLnB1c2goakV2ZW50KTtcclxuICAgIC8vY29uc29sZS5sb2coYUV2ZW50cyk7XHJcbiAgICAvL1NhdmUgdG8gTG9jYWwgc3RvcmFnZVxyXG4gICAgdmFyIHNGaW5hbEV2ZW50cyA9IEpTT04uc3RyaW5naWZ5KGFFdmVudHMpO1xyXG4gICAgLy91cGRhdGUgdGhlIHNFdmVudHMgdG8gbG9jYWwgdGV4dFxyXG4gICAgbG9jYWxTdG9yYWdlLnNFdmVudHMgPSBzRmluYWxFdmVudHM7XHJcbiAgICBcclxuICAgIFxyXG4gICAgLy9SZWFkIGZyb20gbG9jYWxzdG9yYWdlIGFuZCB1cGRhdGUgb24gbG9hZCB0aGUgc2VhcmNoIGNhbGVuZGFyIHdpdGhvIGJiamVjdHNcclxuICB9KTtcclxuICBcclxuICBcclxuICAkKCcjbGJsRXZlbnRzIGRpdicpLmVhY2goZnVuY3Rpb24oIGluZGV4ICkge1xyXG4gICAgY29uc29sZS5sb2coIGluZGV4ICsgJzogJyArICQodGhpcykudGV4dCgpKTtcclxuICAgICQodGhpcykuY3NzO1xyXG4gIH0pO1xyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gIC8vRnVuY3Rpb25zXHJcbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgXHJcbiAgXHJcbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgLy9vbiBsb2FkXHJcbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICBoaWRlV2luZG93c0FuZFNob3dPbmVXaW5kb3coJ3dkdy1ldmVudHMnKTtcclxuICB9KTtcclxuICBcclxuICBcclxuICBmdW5jdGlvbiBpc0xvZ2dlZEluKCkge1xyXG4gICAgLy9pZihsb2NhbFN0b3JhZ2UudXNlckNyZWRzKXtcclxuICAgICQoJyNsaW5rUmVnaXN0ZXInKS5mYWRlT3V0KDUwMCk7XHJcbiAgICAkKCcjbGlua0xvZ2luJykuZmFkZU91dCg1MDApO1xyXG4gICAgJCgnI2xpbmtMb2dvdXQnKS5mYWRlSW4oNTAwKTtcclxuICAgIC8vfVxyXG4gIH1cclxuXHJcbi8vZnVuYyBsb2dvdXRcclxuICBcclxuICBcclxuICAvKlxyXG4gICAvL0RlZmluZSBhcnJheSBvZiBldmVudHMgdG8gbG9vcCB0aHJvdWdoIC0+IGFwcGVuZCB0byB0aGUgdGFibGVcclxuICAgZnVuY3Rpb24gc2VhcmNoRXZlbnRzKCkge1xyXG4gICAvLyBEZWNsYXJlIHZhcmlhYmxlc1xyXG4gICB2YXIgaW5wdXQsIGZpbHRlciwgdGFibGUsIHRyLCB0ZCwgaTtcclxuICAgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9waWMtc2VhcmNoJyk7XHJcbiAgIGZpbHRlciA9IGlucHV0LnZhbHVlLnRvVXBwZXJDYXNlKCk7XHJcbiAgIHRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215VGFibGUnKTtcclxuICAgdHIgPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndHInKTtcclxuICAgXHJcbiAgIC8vIExvb3AgdGhyb3VnaCBhbGwgdGFibGUgcm93cywgYW5kIGhpZGUgdGhvc2Ugd2hvIGRvbid0IG1hdGNoIHRoZSBzZWFyY2ggcXVlcnlcclxuICAgZm9yIChpID0gMDsgaSA8IHRyLmxlbmd0aDsgaSsrKSB7XHJcbiAgIFxyXG4gICB0ZCA9IHRyW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpWzBdO1xyXG4gICBpZiAodGQpIHtcclxuICAgaWYgKHRkLmlubmVySFRNTC50b1VwcGVyQ2FzZSgpLmluZGV4T2YoZmlsdGVyKSA+IC0xKSB7XHJcbiAgIHRyW2ldLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgfSBlbHNlIHtcclxuICAgdHJbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgfVxyXG4gICB9XHJcbiAgIH1cclxuICAgfVxyXG4gICBcclxuICAgXHJcbiAgIC8vU2VhcmNoIFRocm91Z2ggVGFibGUgLT5cclxuICAgJCgnI215SW5wdXQnKS5rZXl1cChmdW5jdGlvbigpIHtcclxuICAgc2VhcmNoRXZlbnRzKCk7XHJcbiAgIH0pO1xyXG4gICAqL1xyXG4gIFxyXG4gIC8qXHJcbiAgIGZ1bmN0aW9uIGNyZWF0ZVBvc3QoKSB7IC8vVGFrZXMgb2JqZWN0ICBQb3N0XHJcbiAgIC8qXHJcbiAgICQoJyN3ZHctYWxsLWV2ZW50cycpLmVtcHR5KCk7XHJcbiAgIHZhciBzUG9zdFRlbXBsYXRlID1cclxuICAgJzxkaXYgY2xhc3M9XCJncmlkX2pvYlwiPjxmaWd1cmUgY2xhc3M9XCJlZmZlY3QtbWlsb1wiIGlkPVwiZmlndXJlMVwiPlxcXHJcbiAgIDxpbWcgY2xhc3M9XCJmZWF0dXJlZC1jb21wYW55X19pbWFnZVwiIHNyYz1cIiR7UG9zdC5pbWd9XCIgYWx0PVwiXCI+PGZpZ2NhcHRpb24+XFxcclxuICAgPGgyPiR7UG9zdC50aXRsZX0gPHNwYW4+ICR7UG9zdC5sb2NhdGlvbn0gPC9zcGFuPlxcXHJcbiAgIDwvaDI+PHA+JHtkZXNjfTwvcD48YSBocmVmPVwiI1wiPlZpZXcgbW9yZTwvYT48L2ZpZ2NhcHRpb24+PC9maWd1cmU+PC9kaXY+XFxcclxuICAgJztcclxuICAgXHJcbiAgICQoJyN3ZC1hbGwtZXZlbnRzJykuYXBwZW5kKHNQb3N0VGVtcGxhdGUpO1xyXG4gICBcclxuICAgXHJcbiAgIH1cclxuICAgKi9cclxuICBcclxuICBcclxuICBmdW5jdGlvbiBnZXRQb3N0KCkge1xyXG4gICAgdmFyIHNJbWFnZVVybCA9ICQoJyNpbnB1dHBvc3RpbWcnKS52YWwoKTtcclxuICAgIHZhciBzcG9zdHRpdGVsID0gJCgnI2lucHV0cG9zdHRpdGVsJykudmFsKCk7XHJcbiAgICB2YXIgc1Bvc3REZXNjID0gJCgnI2lucHV0cG9zdGRlc2MnKS52YWwoKTtcclxuICAgIHZhciBzUG9zdExvY2F0aW9uID0gJCgnI2lucHV0cG9zdGxvY2F0aW9uJykudmFsKCk7XHJcbiAgICBcclxuICAgIC8vY29uc29sZS5sb2coc0ltYWdlVXJsICsgc3Bvc3R0aXRlbCArIHNQb3N0RGVzYyArIHNQb3N0TG9jYXRpb24pO1xyXG4gICAgXHJcbiAgICB2YXIgUG9zdCA9IHtcclxuICAgICAgJ3Bvc3RpbWFnZXVybCc6c0ltYWdlVXJsLFxyXG4gICAgICAncG9zdHRpdGVsJzogc3Bvc3R0aXRlbCxcclxuICAgICAgJ3Bvc3RkZXNjJzogc1Bvc3REZXNjLFxyXG4gICAgICAncG9zdGxvYyc6IHNQb3N0TG9jYXRpb25cclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vRGl2IGFwcGVuZFxyXG4gICAgY29uc29sZS5sb2coUG9zdCk7XHJcbiAgICBcclxuICAgIFxyXG4gICAgLy9Db252ZXJ0cyB0byBvYmplY3RzXHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgbG9naW5BZG1pbigpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGxvZ2luQWRtaW4oKSB7XHJcbiAgICB2YXIgdXNlckNyZWRzQWRtaW4gPSB7XHJcbiAgICAgICd1c2VybmFtZSc6ICd1c2VybmFtZScsXHJcbiAgICAgICdwYXNzd29yZCc6ICdwYXNzd29yZCdcclxuICAgIH07XHJcbiAgICBcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjcmVkZW50aWFscycsIEpTT04uc3RyaW5naWZ5KHVzZXJDcmVkc0FkbWluKSk7XHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gIC8vTG9naW4gb24gcGFnZVxyXG4gIC8vQXV0aGVudGljYXRpb24gaXMgbWlzc2luZyAtIGFkbWluIC0gbWVtYmVyXHJcbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgJCgnI2xvZ2luYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgY3JlZGVudGlhbHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjcmVkZW50aWFscycpKTtcclxuICAgIHZhciBjcmVkZW50aWFsc01lbWJlciA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NyZWRlbnRpYWxzTWVtYmVyJykpO1xyXG4gICAgXHJcbiAgICB2YXIgdXNlcm5hbWVJbnB1dCA9ICQoJyNpbnB1dHVzZXJuYW1lJykudmFsKCk7XHJcbiAgICB2YXIgcGFzc3dvcmQgID0gJCgnI2lucHV0cGFzc3dvcmQnKS52YWwoKTtcclxuICAgIC8vY29uc29sZS5sb2codXNlcm5hbWVJbnB1dCArIHBhc3N3b3JkKTtcclxuICAgIFxyXG4gICAgaWYoY3JlZGVudGlhbHMudXNlcm5hbWUgPT09IHVzZXJuYW1lSW5wdXQgJiYgY3JlZGVudGlhbHMucGFzc3dvcmQgPT09IHBhc3N3b3JkIHx8IGNyZWRlbnRpYWxzTWVtYmVyLnVzZXJuYW1lID09PSB1c2VybmFtZUlucHV0ICYmIGNyZWRlbnRpYWxzTWVtYmVyLnBhc3N3b3JkID09PSBwYXNzd29yZCApIHtcclxuICAgICAgY29uc29sZS5sb2coJ1dlbGNvbWUgTXIuICAgJyArIGNyZWRlbnRpYWxzLnVzZXJuYW1lKTtcclxuICAgICAgLy8gbG9jYWxTdG9yYWdlLmxvZ2dlZEluVXNlciA9IEpTT04uc3RyaW5naWZ5KGNyZWRlbnRpYWxzKTtcclxuICAgICAgaXNMb2dnZWRJbigpO1xyXG4gICAgICAkKCcuYnJhbmQgaDEnKS50ZXh0KCdMb2dnZWQgaW4gYXMgQWRtaW4gJyArICcjICcgKyBjcmVkZW50aWFscy51c2VybmFtZSk7XHJcbiAgICAgIFxyXG4gICAgICBoaWRlV2luZG93c0FuZFNob3dPbmVXaW5kb3coJ3dkdy1yZWdpc3Rlci1tZW1iZXInKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKGNyZWRlbnRpYWxzTWVtYmVyLnVzZXJuYW1lICsgY3JlZGVudGlhbHNNZW1iZXIucGFzc3dvcmQpO1xyXG4gICAgICAvLyAkKCcuYnJhbmQgaDEnKS50ZXh0KCdMb2dnZWQgaW4gYXMgTWVtYmVyJyArICcgIyAnICsgY3JlZGVudGlhbHNNZW1iZXIudXNlcm5hbWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coJ2ZhaWxlZCBsb2dpbicpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBcclxuICB9KTtcclxuICBcclxuICBcclxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAvL1JlZ2lzdGVyIHVzZXIgb24gcGFnZVxyXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICQoJyNtZW1iZXJidG4nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgdmFyIGlucHV0Zm5hbWUgPSAkKCcjaW5wdXRmbmFtZXJlZycpLnZhbCgpO1xyXG4gICAgdmFyIGlucHV0bG5hbWUgPSAkKCcjaW5wdXRsbmFtZXJlZycpLnZhbCgpO1xyXG4gICAgdmFyIGlucHV0ZW1haWwgPSAkKCcjaW5wdXRlbWFpbHJlZycpLnZhbCgpO1xyXG4gICAgdmFyIGlucHV0bG9jYXRpb24gPSAkKCcjaW5wdXRsb2NhdGlvbnJlZycpLnZhbCgpO1xyXG4gICAgdmFyIGlucHV0dXNlcm5hbWUgPSAkKCcjaW5wdXR1c2VybmFtZXJlZycpLnZhbCgpO1xyXG4gICAgdmFyIGlucHV0cGFzcyA9ICQoJyNpbnB1dHBhc3N3b3JkcmVnJykudmFsKCk7XHJcbiAgICBcclxuICAgIC8vY29uc29sZS5sb2coJ05ldyBSZWdpc3RlcmQgdXNlciA9ICAnICsgaW5wdXR1c2VybmFtZSk7XHJcbiAgICBcclxuICAgIHZhciB1c2VyQ3JlZHMgPSB7XHJcbiAgICAgIFwiZm5hbWVcIiA6IGlucHV0Zm5hbWUsXHJcbiAgICAgIFwibG5hbWVcIjogaW5wdXRsbmFtZSxcclxuICAgICAgXCJlbWFpbFwiOmlucHV0ZW1haWwsXHJcbiAgICAgIFwibG9jYXRpb25cIjppbnB1dGxvY2F0aW9uLFxyXG4gICAgICBcInVzZXJuYW1lXCI6IGlucHV0dXNlcm5hbWUsXHJcbiAgICAgIFwicGFzc3dvcmRcIjogaW5wdXRwYXNzLFxyXG4gICAgICBcclxuICAgIH07XHJcbiAgICBcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjcmVkZW50aWFsc01lbWJlcicsIEpTT04uc3RyaW5naWZ5KHVzZXJDcmVkcykpO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnTG9jYWwgU3RvcmFnZSBzdG9yZScsIHVzZXJDcmVkcyk7XHJcbiAgICBoaWRlV2luZG93c0FuZFNob3dPbmVXaW5kb3coJ3dkdy1sb2dpbicpO1xyXG4gICAgXHJcbiAgfSk7XHJcbiAgXHJcbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgLy9NYW5hZ2UgUGFydG5lcnNcclxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICBcclxuICBcclxuICBcclxuICAvL1NhdmUgUGFydG5lcnMgZnJvbSBKU09OIGZpbGUgaWYgdGhleSBkb24ndCBleGlzdCBpbnRvIGxvY2FsIHN0b3JhZ2UgYW5kIGRpc3BsYXkgdGhlbVxyXG4gIC8vIGxpc3QgcGFydG5lcnMgZnJvbSBsb2NhbCBzdG9yYWdlIGluIHRoZSB0YWJsZVxyXG4gIGZ1bmN0aW9uIGxpc3RQYXJ0bmVyc0Zyb21MUygpe1xyXG4gICAgLy9nZXQgcGFydG5lcnMgZm9ybSBsb2NhbCBzdG9yYWdlXHJcbiAgICB2YXIgZmluYWxQYXJ0bmVycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLnBhcnRuZXJzKTtcclxuICAgIC8vY2xlYXIgdGhlIHRhYmxlIGNvbnRlbnRcclxuICAgICQoJyNwYXJ0bmVycy10YWJsZSB0Ym9keScpLmh0bWwoXCJcIik7XHJcbiAgICAvL2FwcGVuZCBlYWNoIHBhcnRuZXIgaW4gdGhlIHRhYmxlXHJcbiAgICBmaW5hbFBhcnRuZXJzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgJCgnI3BhcnRuZXJzLXRhYmxlIHRib2R5JykuYXBwZW5kKFxyXG4gICAgICAgIFwiPHRyPlxcXHJcbiAgICAgICAgPHRkPlwiICsgaXRlbS5pZCArIFwiPC90ZD5cXFxyXG4gICAgICAgIDx0ZD5cIiArIGl0ZW0ubmFtZSArIFwiPC90ZD5cXFxyXG4gICAgICAgIDx0ZD5cIiArIGl0ZW0udHlwZSArIFwiPC90ZD5cXFxyXG4gICAgICAgIDx0ZD5cIiArIGl0ZW0uZGVzY3JpcHRpb24gKyBcIjwvdGQ+XFxcclxuICAgICAgICA8dGQ+XCIgKyBpdGVtLnBhcnRuZXJwaWNfc3JjICsgXCI8L3RkPlxcXHJcbiAgICAgICAgPHRkPjxpIGNsYXNzPSdmYSBmYS1wZW5jaWwnIGlkPSdlZGl0LXBhcnRuZXItYnRuJyBkYXRhLXBhcnRuZXItaWQgPSAnXCIrIGl0ZW0uaWQgK1wiJz48L2k+XFxcclxuICAgICAgICA8aSBjbGFzcz0nZmEgZmEtdHJhc2gnIGlkPSdkZWxldGUtcGFydG5lci1idG4nIGRhdGEtcGFydG5lci1pZCA9ICdcIiArIGl0ZW0uaWQgKyBcIic+PC9pPjwvdGQ+XFxcclxuICAgICAgICA8L3RyPlwiKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gICQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbiAoKSB7XHJcbiAgICAkKCcjd2R3LWVkaXQtcGFydG5lcicpLmhpZGUoKTtcclxuICAgICQoJyN3ZHctYWRkLXBhcnRuZXInKS5oaWRlKCk7XHJcbiAgICAkKCcjcGFydG5lcnMtdGFibGUgdGJvZHknKS5odG1sKFwiXCIpO1xyXG4gICAgLy8gb2JqZWN0IGZvciBwYXJ0bmVycyBmcm9tIGxvY2FsIHN0b3JhZ2VcclxuICAgIHZhciBvUGFydG5lcnMgPSBbXTtcclxuICAgIC8vZ2V0dGluZyB0aGUgcGFydG5lcnMgZnJvbSBsb2NhbCBzdG9yYWdlXHJcbiAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGFydG5lcnMnKSAhPT0gbnVsbCApIHtcclxuICAgICAgb1BhcnRuZXJzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UucGFydG5lcnMpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcImxvY2FsIHN0b3JhZ2U6IFwiLCBvUGFydG5lcnMpO1xyXG4gICAgfVxyXG4gICAgJC5nZXRKU09OKFwiYXNzZXRzL2RhdGEvcGFydG5lcnMuanNvblwiLCBmdW5jdGlvbiAoanNvbl9kYXRhKSB7XHJcbiAgICAgIFxyXG4gICAgICAvL2lmIGxvY2FsIHN0b3JhZ2UgaXMgZW1wdHkgbG9hZCBwYXJ0bmVycyBmcm9tIGZpbGVcclxuICAgICAgaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJwYXJ0bmVyc1wiKSA9PSBudWxsIHx8IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwicGFydG5lcnNcIikgPT0gXCJbXVwiKXtcclxuICAgICAgICBsb2NhbFN0b3JhZ2UucGFydG5lcnMgPSBKU09OLnN0cmluZ2lmeShqc29uX2RhdGEpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvL2l0ZXJhdGluZyBvdmVyIG9iamVjdHMgZnJvbSBqc29uIGZpbGUgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlc1xyXG4gICAgICBqc29uX2RhdGEuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBvYmogPSB7fTtcclxuICAgICAgICBcclxuICAgICAgICBvYmouaWQgPSBlbGVtLmlkO1xyXG4gICAgICAgIG9iai5uYW1lID0gZWxlbS5uYW1lO1xyXG4gICAgICAgIG9iai5kZXNjcmlwdGlvbiA9IGVsZW0uZGVzY3JpcHRpb247XHJcbiAgICAgICAgb2JqLnBhcnRuZXJwaWNfc3JjID0gZWxlbS5wYXJ0bmVycGljX3NyYztcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyggXCJQYXJ0bmVyIGlkLlwiLCBvYmouaWQsIFwiLCBuYW1lOiBcIiwgb2JqLm5hbWUsIFwiLCBkZXNjcmlwdGlvbjogXCIsIG9iai5kZXNjcmlwdGlvbiwgXCIsIHBpY3R1cmUvbG9nbzogXCIsIG9iai5wYXJ0bmVycGljX3NyYyk7XHJcbiAgICAgICAgXHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgbGlzdFBhcnRuZXJzRnJvbUxTKCk7XHJcbiAgICAgIFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgLy9FZGl0IFBhcnRuZXJcclxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICBcclxuICB2YXIgaWQ7XHJcbiAgLy9saXN0ZW5lciB0byBkaXNwbGF5IHRoZSBlZGl0IGNvbnRhaW5lciBhbmQgZmlsbCBpbnB1dCBmaWVsZHMgd2l0aCB0aGUgY2xpY2tlZCBwYXJ0bmVyXHJcbiAgJChcImJvZHlcIikub24oXCJjbGlja1wiLCBcIiNlZGl0LXBhcnRuZXItYnRuXCIsIGZ1bmN0aW9uKCl7XHJcbiAgICBpZCA9ICQodGhpcykuZGF0YSgncGFydG5lci1pZCcpO1xyXG4gICAgLy9oaWRlIHBhcnRuZXJzIGxpc3QgYW5kIHNob3cgZWRpdCBwYXJ0bmVyIGNvbnRhaW5lclxyXG4gICAgJChcIiN3ZHctbGlzdC1wYXJ0bmVyc1wiKS5oaWRlKCk7XHJcbiAgICAkKFwiI3dkdy1lZGl0LXBhcnRuZXJcIikuc2hvdygpO1xyXG4gICAgXHJcbiAgICB2YXIgb1BhcnRuZXJzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UucGFydG5lcnMpO1xyXG4gICAgXHJcbiAgICBvUGFydG5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgICBcclxuICAgICAgaWYoZWxlbS5pZCA9PSBpZCl7XHJcbiAgICAgICAgLy9zZXR0aW5nIHRoZSBpbnB1dCBmaWVsZHMgdG8gYmUgZWRpdGVkXHJcbiAgICAgICAgJChcImlucHV0W25hbWU9J3BhcnRuZXItbmFtZSddXCIpLnZhbChlbGVtLm5hbWUpO1xyXG4gICAgICAgICQoXCJpbnB1dFtuYW1lPSdwYXJ0bmVyLXR5cGUnXVwiKS52YWwoZWxlbS50eXBlKTtcclxuICAgICAgICAkKFwiaW5wdXRbbmFtZT0ncGFydG5lci1kZXNjciddXCIpLnZhbChlbGVtLmRlc2NyaXB0aW9uKTtcclxuICAgICAgICAkKFwiaW5wdXRbbmFtZT0ncGFydG5lci1waWN0J11cIikudmFsKGVsZW0ucGFydG5lcnBpY19zcmMpO1xyXG4gICAgICAgIFxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLy9zYXZpbmcgdGhlIGVkaXRlZCBwYXJ0bmVyXHJcbiAgJCgnI3BhcnRuZXItc2F2ZS1idG4nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIFxyXG4gICAgb2JqLmlkID0gaWQ7XHJcbiAgICBvYmoubmFtZSA9ICQoXCJpbnB1dFtuYW1lPSdwYXJ0bmVyLW5hbWUnXVwiKS52YWwoKVxyXG4gICAgb2JqLnR5cGUgPSAkKFwiaW5wdXRbbmFtZT0ncGFydG5lci10eXBlJ11cIikudmFsKCk7XHJcbiAgICBvYmouZGVzY3JpcHRpb24gPSAkKFwiaW5wdXRbbmFtZT0ncGFydG5lci1kZXNjciddXCIpLnZhbCgpO1xyXG4gICAgb2JqLnBhcnRuZXJwaWNfc3JjID0gJChcImlucHV0W25hbWU9J3BhcnRuZXItcGljdCddXCIpLnZhbCgpO1xyXG4gICAgXHJcbiAgICBcclxuICAgIHZhciBvUGFydG5lcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5wYXJ0bmVycyk7XHJcbiAgICBcclxuICAgIG9QYXJ0bmVycy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtLCBpbmRleCkge1xyXG4gICAgICBpZihlbGVtLmlkID09IGlkKXtcclxuICAgICAgICAvL3JlcGxhY2luZyBvbmx5IGZvciB0aGUgZm91bmQgaWRcclxuICAgICAgICBvUGFydG5lcnNbaW5kZXhdID0gb2JqO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vc2V0dGluZyB0aGUgdmFsdWUgdXBkYXRlZCBpbiBsb2NhbFN0b3JhZ2VcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicGFydG5lcnNcIiwgSlNPTi5zdHJpbmdpZnkob1BhcnRuZXJzKSk7XHJcbiAgICAvL2Rpc3BsYXkgdGhlIHBhcnRuZXJzIGxpc3QgaW5zdGVhZCBlZGl0IHBhcnRuZXJcclxuICAgICQoXCIjd2R3LWVkaXQtcGFydG5lclwiKS5oaWRlKCk7XHJcbiAgICBsaXN0UGFydG5lcnNGcm9tTFMoKTtcclxuICAgICQoXCIjd2R3LWxpc3QtcGFydG5lcnNcIikuc2hvdygpO1xyXG4gIH0pO1xyXG4gIFxyXG4gICQoJyNjYW5jZWwtYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIiN3ZHctZWRpdC1wYXJ0bmVyXCIpLmhpZGUoKTtcclxuICAgICQoXCIjd2R3LWxpc3QtcGFydG5lcnNcIikuc2hvdygpO1xyXG4gIH0pO1xyXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gIC8vQWRkIFBhcnRuZXJcclxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICBcclxuICAkKCcjYWRkLXBhcnRuZXItYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIiN3ZHctbGlzdC1wYXJ0bmVyc1wiKS5oaWRlKCk7XHJcbiAgICAkKFwiI3dkdy1hZGQtcGFydG5lclwiKS5zaG93KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgJCgnI3BhcnRuZXItYWRkLW5vdy1idG4nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIFxyXG4gICAgLyogb2JqLmlkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7Ki9cclxuICAgIG9iai5uYW1lID0gJChcImlucHV0W25hbWU9J3BhcnRuZXItYWRkLW5hbWUnXVwiKS52YWwoKVxyXG4gICAgb2JqLnR5cGUgPSAkKFwiaW5wdXRbbmFtZT0ncGFydG5lci1hZGQtdHlwZSddXCIpLnZhbCgpO1xyXG4gICAgb2JqLmRlc2NyaXB0aW9uID0gJChcImlucHV0W25hbWU9J3BhcnRuZXItYWRkLWRlc2NyJ11cIikudmFsKCk7XHJcbiAgICBvYmoucGFydG5lcnBpY19zcmMgPSAkKFwiaW5wdXRbbmFtZT0ncGFydG5lci1hZGQtcGljdCddXCIpLnZhbCgpO1xyXG4gICAgXHJcbiAgICAkKFwiaW5wdXRbbmFtZT0ncGFydG5lci1hZGQtbmFtZSddXCIpLnZhbChcIlwiKVxyXG4gICAgJChcImlucHV0W25hbWU9J3BhcnRuZXItYWRkLXR5cGUnXVwiKS52YWwoXCJcIik7XHJcbiAgICAkKFwiaW5wdXRbbmFtZT0ncGFydG5lci1hZGQtZGVzY3InXVwiKS52YWwoXCJcIik7XHJcbiAgICAkKFwiaW5wdXRbbmFtZT0ncGFydG5lci1hZGQtcGljdCddXCIpLnZhbChcIlwiKTtcclxuICAgIFxyXG4gICAgLy9zYXZlIG5ldyBwYXJ0bmVyIGluIGxvY2FsIHN0b3JhZ2VcclxuICAgIHZhciBvUGFydG5lcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5wYXJ0bmVycyk7XHJcbiAgICBvYmouaWQgPSBvUGFydG5lcnMubGVuZ3RoICsgMTtcclxuICAgIG9QYXJ0bmVycy5wdXNoKG9iaik7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGFydG5lcnMnLCBKU09OLnN0cmluZ2lmeShvUGFydG5lcnMpKTtcclxuICAgIGxpc3RQYXJ0bmVyc0Zyb21MUygpO1xyXG4gICAgJChcIiN3ZHctYWRkLXBhcnRuZXJcIikuaGlkZSgpO1xyXG4gICAgJChcIiN3ZHctbGlzdC1wYXJ0bmVyc1wiKS5zaG93KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgJCgnI2NhbmNlbC1idG4yJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIiN3ZHctYWRkLXBhcnRuZXJcIikuaGlkZSgpO1xyXG4gICAgJChcIiN3ZHctbGlzdC1wYXJ0bmVyc1wiKS5zaG93KCk7XHJcbiAgfSlcclxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAvL0RlbGV0ZSBQYXJ0bmVyc1xyXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gIC8vbGlzdGVuZXIgdG8gZGVsZXRlIG9uZSBwYXJ0bmVyXHJcbiAgJChcImJvZHlcIikub24oXCJjbGlja1wiLFwiI2RlbGV0ZS1wYXJ0bmVyLWJ0blwiLGZ1bmN0aW9uKCl7XHJcbiAgICBpZCA9ICQodGhpcykuZGF0YSgncGFydG5lci1pZCcpO1xyXG4gICAgLy9nZXQgdGhlIHBhcnRuZXJzIGZyb20gbG9jYWwgc3RvcmFnZVxyXG4gICAgdmFyIG9QYXJ0bmVycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLnBhcnRuZXJzKTtcclxuICAgIC8vaXRlcmF0ZSB0aHJvdWdoIHBhcnRuZXJzIG9iamVjdCBhbmQgZGVsZXRlIHRoZSBvbmUgd2l0aCBhIHNwZWNpZmljIGlkXHJcbiAgICBvUGFydG5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSwgaW5kZXgpIHtcclxuICAgICAgXHJcbiAgICAgIC8vcmVtb3ZlIHRoZSBwYXJ0bmVyIHdpdGggdGhlIGlkIGNvcnJlc3BvbmRpbmcgd2l0aCB0aGUgaWQgb2YgdGhlIG9uZSBjbGlja2VkXHJcbiAgICAgIGlmKGVsZW0uaWQgPT0gaWQpe1xyXG4gICAgICAgIC8vc3dlZXQgYWxlcnQgZm9yIGNvbmZpcm1hdGlvblxyXG4gICAgICAgIHN3YWwoe1xyXG4gICAgICAgICAgICB0aXRsZTogXCJBcmUgeW91IHN1cmU/XCIsXHJcbiAgICAgICAgICAgIHRleHQ6IFwiRG8geW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgcGFydG5lciFcIixcclxuICAgICAgICAgICAgdHlwZTogXCJ3YXJuaW5nXCIsXHJcbiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogXCIjREQ2QjU1XCIsXHJcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgZGVsZXRlIGl0IVwiLFxyXG4gICAgICAgICAgICBjbG9zZU9uQ29uZmlybTogZmFsc2VcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBvUGFydG5lcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwYXJ0bmVyc1wiLCBKU09OLnN0cmluZ2lmeShvUGFydG5lcnMpKTtcclxuICAgICAgICAgICAgbGlzdFBhcnRuZXJzRnJvbUxTKCk7XHJcbiAgICAgICAgICAgIHN3YWwoXCJEZWxldGVkIVwiLCBcIlRoZSBwYXJ0bmVyIGhhcyBiZWVuIGRlbGV0ZWQuXCIsIFwic3VjY2Vzc1wiKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIFxyXG4gIH0pO1xyXG4gIFxyXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gIC8vSG9tZSBwYWdlIFNlYXJjaFxyXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBjb21wYXJlKGlucHV0VmFsLCBkYXRhVmFsLCBqT2JqKSB7XHJcblx0aW5wdXRWYWwgPSBpbnB1dFZhbC50b0xvd2VyQ2FzZSgpO1xyXG4gIGRhdGFWYWwgPSBkYXRhVmFsLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gIGNvbnNvbGUubG9nKFwiVGhlIGlucHV0IHZhbHVlIGlzOiBcIiArIGlucHV0VmFsKTtcclxuICBjb25zb2xlLmxvZyhcIlRoZSBKU09OIGRhdGEgdG8gY29tcGFyZSBpczogXCIgKyBkYXRhVmFsKTtcclxuXHJcbiAgdmFyIGJvb2wgPSBkYXRhVmFsLmluY2x1ZGVzKGlucHV0VmFsKTtcclxuICBjb25zb2xlLmxvZyhcIlRoZSBib29sID0gXCIgKyBib29sKTtcclxuXHJcbiAgICBpZiAoYm9vbCA9PSB0cnVlKSB7XHJcbiAgICBcdGNvbnNvbGUubG9nKFwiVHJ1ZVwiKTtcclxuICAgICAgLy9hZGQgdG8galJlc3VsdHMgKG11c3QgZXhpc3Qgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgZnVuY3Rpb24pXHJcbiAgICAgIGpSZXN1bHRzLmFkZChqT2JqKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICBcdGNvbnNvbGUubG9nKFwiRmFsc2VcIik7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuXHJcbiAvL1NlYXJjaCBpbnB1dCAtIEhvbWUgcGFnZSBcclxuICAkKCcjc2VhcmNoRXZlbnRzJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAvL2dldCBpbnB1dCB2YWx1ZSBvZiAjc2VhcmNoLWVuZ2luZVxyXG4gICAgICB2YXIgaW5wdXRTZWFyY2hGaWVsZCA9ICAkKCcjc2VhcmNoLWVuZ2luZScpLnZhbCgpO1xyXG4gICAgICB2YXIgYUlucHV0ID0gaW5wdXRTZWFyY2hGaWVsZC5zcGxpdChcIiBcIik7XHJcbiAgICAgIHZhciBqUmVzdWx0cyA9IHt9O1xyXG5cclxuICAgICAgY29uc29sZS5sb2coYUlucHV0KTtcclxuXHJcbiAgICAgIFxyXG4gICAgICBqVGVtcC5mb3JFYWNoKGZ1bmN0aW9uKGope1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBuYW1lID0gai5uYW1lO1xyXG4gICAgICAgIHZhciB0b3BpYyA9IGoudG9waWM7XHJcbiAgICAgICAgdmFyIGxldmVsID0gai5sZXZlbDtcclxuICAgICAgICB2YXIgb3JnID0gai5zcGVha2VyX29yZ2FuaXphdGlvbjtcclxuICAgICAgICB2YXIgbG9jYXRpb24gPSBqLmxvY2F0aW9uO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKG5hbWUsIHRvcGljLCBsZXZlbCwgb3JnKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImNvbXBhcmUgdG86IFwiICsgdGVtcCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgLyp2YXIgY29udGFpbnNCb29sID0gai5pbmNsdWRlcyhhKTtcclxuICAgICAgICAgXHJcbiAgICAgICAgIGlmKGNvbnRhaW5zQm9vbCkge1xyXG4gICAgICAgICBjb25zb2xlLmxvZyhjb250YWluc0Jvb2wpO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgICovXHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy9jaGVjayBlYWNoIGFJbnB1dCBmb3IgYSBtYXRjaFxyXG4gICAgICBhSW5wdXQuZm9yRWFjaChmdW5jdGlvbihhKSB7XHJcblxyXG4gICAgICAgIC8vY2hlY2sgZWFjaCBhcnJheSBvYmplY3QgZm9yIGEgbWF0Y2ggaW4gY29ycmVzcG9uZGluZyBqc29uXHJcbiAgICAgICAgLy9hID09IGpUZW1wLmluY3JlbWVudG9yLnByb3BlcnR5IFxyXG4gICAgICAgIHZhciB0ZW1wID0gYTtcclxuXHJcbiAgICAgICAgalRlbXAuZm9yRWFjaChmdW5jdGlvbihqKXtcclxuXHJcbiAgICAgICAgICAgdmFyIG5hbWUgPSBqLm5hbWU7XHJcbiAgICAgICAgICAgdmFyIHRvcGljID0gai50b3BpYztcclxuICAgICAgICAgICB2YXIgbGV2ZWwgPSBqLmxldmVsO1xyXG4gICAgICAgICAgIHZhciBvcmcgPSBqLnNwZWFrZXJfb3JnYW5pemF0aW9uO1xyXG4gICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGoubG9jYXRpb247XHJcblxyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJjb21wYXJlIFwiICsgdGVtcCArIFwiIHRvOiBcIiArIGoubmFtZSwgXCJMb2NhIDpcIiArIGoubG9jYXRpb24gKyBcIiBPcmdhbml6YXRpb24gXCIgKyBqLnNwZWFrZXJfb3JnYW5pemF0aW9uICk7XHJcblxyXG4gICAgICAgICAgIC8vQ29tcGFyZSB0aGUgdmFsdWVzIGZyb20gaW5wdXQgLT4gYXJyYXlzXHJcbiAgICAgICAgICBjb21wYXJlKHRlbXAsIG5hbWUpO1xyXG4gICAgICAgICAgLy9jb21wYXJlKHRlbXAsIHRvcGljKTsgLy90aGlzIGlzIGFuIGFycmF5XHJcbiAgICAgICAgICBjb21wYXJlKHRlbXAsIGxldmVsKTtcclxuICAgICAgICAgIGNvbXBhcmUodGVtcCwgb3JnKTtcclxuICAgICAgICAgIC8vY29tcGFyZSh0ZW1wLCBsb2NhdGlvbik7IC8vdGhpcyBpcyBhIEpTT04gb2JqZWN0XHJcblxyXG4gIFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTsgXHJcbiAgfSk7IFxyXG5cclxuICBcclxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAvL0V2ZW50IExpc3RlbmVyc1xyXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gIFxyXG4gIFxyXG4gIC8vUG9zdFxyXG4gICQoJyNwb3N0YnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICBnZXRQb3N0KCk7XHJcbiAgICBjb25zb2xlLmxvZygncG9zdCBldmVudCcpO1xyXG4gIH0pO1xyXG5cclxuLy9OYXYgLSBMb2dpblxyXG4gICQoJyNsaW5rLWxvZ2luJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICBoaWRlV2luZG93c0FuZFNob3dPbmVXaW5kb3coJ3dkdy1sb2dpbicpO1xyXG4gICAgY29uc29sZS5sb2coJ05hdiAtIGxvZ2luIGNsaWNrZWQnKTtcclxuICB9KTtcclxuXHJcbi8vTmF2IC0gSG9tZVxyXG4gICQoJyNsaW5rLWhvbWUnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgIGhpZGVXaW5kb3dzQW5kU2hvd09uZVdpbmRvdygnd2R3LWV2ZW50cycpO1xyXG4gICAgY29uc29sZS5sb2coJ05hdiAtIEhvbWUgQ2xpY2tlZCAnKTtcclxuICB9KTtcclxuXHJcblxyXG4vL05hdiAtIEV2ZW50XHJcbiAgJCgnI2xpbmstZXZlbnRzJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICBoaWRlV2luZG93c0FuZFNob3dPbmVXaW5kb3coJ3dkdy1ldmVudC1tYW5hZ2VyLWNvbnRhaW5lcicpO1xyXG4gIH0pO1xyXG5cclxuXHJcbi8vTmF2IC0gTmV3c1xyXG4gICQoJyNsaW5rTmV3cycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgaGlkZVdpbmRvd3NBbmRTaG93T25lV2luZG93KCd3ZHctbmV3cycpO1xyXG4gIH0pO1xyXG5cclxuXHJcbi8vTmF2IC0gUGFydG5lcnNcclxuICAkKCcjbGluay1wYXJ0bmVycycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgaGlkZVdpbmRvd3NBbmRTaG93T25lV2luZG93KCdwYXJ0bmVycy1jb250YWluZXInKTtcclxuICB9KTtcclxuXHJcbi8vTmF2IC0gQ2FsZW5kYXJcclxuICAkKCcjbGlua0NhbGVuZGFyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICBoaWRlV2luZG93c0FuZFNob3dPbmVXaW5kb3coJ3dkdy1jYWxlbmRhcicpO1xyXG4gICAgY29uc29sZS5sb2coJ05hdiAtIENhbGVuZGFyIGNsaWNrZWQnKTtcclxuICB9KTtcclxuXHJcbi8vTmF2IC0gQWxsIEV2ZW50c1xyXG4gICQoJyNsaW5rQWxsRXZlbnRzJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICBoaWRlV2luZG93c0FuZFNob3dPbmVXaW5kb3coJ3dkdy1hbGwtZXZlbnRzJyk7XHJcbiAgICBjb25zb2xlLmxvZygnTmF2IC0gYWxsIGV2ZW50cyBjbGljaycpO1xyXG4gIH0pO1xyXG5cclxuXHJcbi8vUGFnZSAtIFBvc3QgYW4gZXZlbnRcclxuICAkKCcjYnRucG9zdGV2ZW50Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICBoaWRlV2luZG93c0FuZFNob3dPbmVXaW5kb3coJ3dkdy1wb3N0LWV2ZW50Jyk7XHJcbiAgICBjb25zb2xlLmxvZygnUG9zdGNsaWNrZScpO1xyXG4gIH0pO1xyXG5cclxuLy9SZW1vdmUgRXZlbnRcclxuICBhRXZlbnRzLmluZGV4T2YodGhpcyk7XHJcbiAgXHJcbiAgJCgnLmZhLWZhLXRyYXNoJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICBjb25zb2xlLmxvZygnVHJhc2hlZCBjbGlja2VkJywgYUV2ZW50cywgYUV2ZW50c1tpXSwgYUV2ZW50cy5sZW5ndGgpO1xyXG4gICAgYUV2ZW50cy5zcGxpY2UoMSwxKTtcclxuICB9KTtcclxuXHJcblxyXG4vL1RyYXNoIERlbGV0ZSBzZWFyY2ggZXZlbnRzXHJcbiAgJCgnLmZhLWZhLXRyYXNoJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAkKHRoaXMpLnBhcmVudCgpLmhpZGUoKTtcclxuICAgIGNvbnNvbGUubG9nKCdUcmFzaCBkZWxldGUgY2xpY2tlZCAnKTtcclxuICB9KTtcclxuXHJcblxyXG5cclxuLy9BZG1pbiBJbmRleFxyXG4gIFxyXG4gIGNvbnNvbGUubG9nKCdldmVudHMnICwgYUV2ZW50cyk7XHJcbiAgXHJcbn0pKGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4iXX0=
