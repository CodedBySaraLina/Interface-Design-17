/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
!function(t,e,n,a){"use strict";function o(){var e=JSON.parse(localStorage.events);e.forEach(function(e){t("#event-listing tbody").append('<tr data-event-id="'+e.id+'">\t\t\t\t\t\t\t\t\t\t<td>'+e.name+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.topic+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.speaker+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.date.day+" "+e.date.month+" "+e.date.year+"</td>\t\t\t\t\t\t\t\t\t\t<td>"+e.time_24h.hour+":"+e.time_24h.minute+'</td>\t\t\t\t\t\t\t\t\t\t<td>\t\t\t\t\t\t\t\t\t\t\t<i class="fa fa-pencil" id="edit-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t\t\t<i class="fa fa-trash" id="delete-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\t\t\t</tr>\t\t\t')})}function i(e){t(".wdw").fadeOut(300),t("#"+e).fadeIn(300)}function l(){t("#linkRegister").fadeOut(500),t("#linkLogin").fadeOut(500),t("#linkLogout").fadeIn(500)}function r(){var e=t("#inputpostimg").val(),n=t("#inputposttitel").val(),a=t("#inputpostdesc").val(),o=t("#inputpostlocation").val(),i={postimageurl:e,posttitel:n,postdesc:a,postloc:o};console.log(i)}function d(){var t={username:"username",password:"password"};localStorage.setItem("credentials",JSON.stringify(t))}function s(){var e=JSON.parse(localStorage.partners);t("#partners-table tbody").html(""),e.forEach(function(e){t("#partners-table tbody").append("<tr>        <td>"+e.id+"</td>        <td>"+e.name+"</td>        <td>"+e.type+"</td>        <td>"+e.description+"</td>        <td>"+e.partnerpic_src+"</td>        <td><i class='fa fa-pencil' id='edit-partner-btn' data-partner-id = '"+e.id+"'></i>        <i class='fa fa-trash' id='delete-partner-btn' data-partner-id = '"+e.id+"'></i></td>        </tr>")})}function c(t,e,n,a){var o=t.toLowerCase(),i=e.toLowerCase();console.log("The input value is: "+o),console.log("The JSON data to compare is: "+i);var l=i.includes(o);console.log("The bool = "+l),1==l?(console.log("Match made"),a.push(n)):console.log("False")}null==localStorage.events?(console.log("localStorage.events is empty"),t.getJSON("assets/data/events.json").done(function(t){console.log(t),t=JSON.stringify(t),localStorage.events=t,console.log("localStorage.events successfully populated"),o()})):localStorage.events&&(console.log("localStorage.events has data"),o()),t("#create-event-btn").on("click",function(){console.log("save-btn clicked");var e=new Date;e=e.valueOf();var n=t("#wdw-event-create").find("input[name='event-name']").val(),a=t("#wdw-event-create").find("input[name='event-topics']").val(),o=t("#wdw-event-create").find("input[name='event-level']").val(),i=t("#wdw-event-create").find("input[name='event-speaker']").val(),l=t("#wdw-event-create").find("input[name='event-speaker-org']").val(),r=new Date(t("#wdw-event-create").find("input[name='event-date']").val()),d=t("#wdw-event-create").find("input[name='event-time']").val(),s=t("#wdw-event-create").find("input[name='event-info']").val();console.log(p);var c=[],c=a.split(",");for(console.log(c),u=0;u<c.length;u++)" "==c[u].charAt(0)&&(console.log("first char: "+c[u].charAt(0)),c[u]=c[u].slice(1,c[u].length),console.log("str now equals "+c[u]))," "==c[u].charAt(c[u].length-1)&&(console.log("last char: "+c[u].charAt(0)),c[u]=c[u].slice(0,c[u].length-1),console.log("str now equals "+c[u]));console.log(c);var p=d.split(":",2);p.forEach(function(t){if(console.log("aTime Foreach"),console.log(t.length),t.length>2)return console.log(t),void console.log("Invalid time");if(t.length<=2){var e=p.indexOf(t);0==e?(console.log(t),r.setHours(t)):1==e&&(console.log(t),r.setMinutes(t))}}),console.log(r);var v={id:e,name:n,topic:c,level:o,speaker:i,speaker_organization:l,date:{day:r.getDate(),month:r.getMonth(),year:r.getFullYear()},time_24h:{hour:r.getHours(),minute:r.getMinutes()},info:s,past:!1};console.log(v);var g=JSON.parse(localStorage.events);g.push(v),localStorage.setItem("events",JSON.stringify(g)),t("#event-listing").append('<tr data-event-id="'+v.id+'">\t\t\t\t\t\t\t\t\t<td>'+v.name+"</td>\t\t\t\t\t\t\t\t\t<td>"+v.topic+"</td>\t\t\t\t\t\t\t\t\t<td>"+v.speaker+"</td>\t\t\t\t\t\t\t\t\t<td>"+v.date.day+" "+v.date.month+" "+v.date.year+"</td>\t\t\t\t\t\t\t\t\t<td>"+v.time_24h.hour+":"+v.time_24h.minute+'</td>\t\t\t\t\t\t\t\t\t<td>\t\t\t\t\t\t\t\t\t\t<i class="fa fa-pencil" id="edit-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t\t<i class="fa fa-trash" id="delete-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\t\t</tr>\t')}),t(n).on("click","#edit-event-icon",function(){console.log(".fa-pencil icon clicked");var e=t(this).parent().parent().data("event-id");t("#wdw-event-update").attr("data-event-id",e);var a=JSON.parse(localStorage.events);a.forEach(function(a){if(a.id==e){var o=a.date.year+"-"+a.date.month+"-"+a.date.day,i=o.split("-");if(1==i[1].length){var l=i[1].toString(),r="0",d=r.concat(l);i[1]=d,console.log(i[1])}if(1==i[2].length){var l=i[2].toString(),r="0",d=r.concat(l);i[2]=d,console.log(i[2])}var o=a.date.year+"-"+i[1]+"-"+i[2];console.log(o),t("#wdw-event-update").find("input[name='event-name']").val(a.name),t("#wdw-event-update").find("input[name='event-topics']").val(a.topic),t("#wdw-event-update").find("input[name='event-level']").val(a.level),t("#wdw-event-update").find("input[name='event-speaker']").val(a.speaker),t("#wdw-event-update").find("input[name='event-speaker-org']").val(a.speaker_organization),n.getElementById("edit-event-date").value=o,t("#wdw-event-update").find("input[name='event-time']").val(a.time_24h.hour+":"+a.time_24h.minute),t("#wdw-event-update").find("input[name='event-info']").val(a.info)}})}),t("#update-event-btn").on("click",function(){console.log("#update-event clicked");var e=t("#wdw-event-update").attr("data-event-id"),a=t("#wdw-event-update").find("input[name='event-name']").val(),o=t("#wdw-event-update").find("input[name='event-topics']").val(),i=t("#wdw-event-update").find("input[name='event-level']").val(),l=t("#wdw-event-update").find("input[name='event-speaker']").val(),r=t("#wdw-event-update").find("input[name='event-speaker-org']").val(),d=new Date(t("#wdw-event-update").find("input[name='event-date']").val()),s=t("#wdw-event-update").find("input[name='event-time']").val(),c=t("#wdw-event-update").find("input[name='event-info']").val();console.log(v);var p=[],p=o.split(",");for(console.log(p),u=0;u<p.length;u++)" "==p[u].charAt(0)&&(console.log("first char: "+p[u].charAt(0)),p[u]=p[u].slice(1,p[u].length),console.log("str now equals "+p[u]))," "==p[u].charAt(p[u].length-1)&&(console.log("last char: "+p[u].charAt(0)),p[u]=p[u].slice(0,p[u].length-1),console.log("str now equals "+p[u]));console.log(p);var v=s.split(":",2);v.forEach(function(t){if(console.log("aTime Foreach"),console.log(t.length),t.length>2)return console.log(t),void console.log("Invalid time");if(t.length<=2){var e=v.indexOf(t);0==e?(console.log(t),d.setHours(t)):1==e&&(console.log(t),d.setMinutes(t))}}),console.log(d);var g={id:e,name:a,topic:p,level:i,speaker:l,speaker_organization:r,date:{day:d.getDate(),month:d.getMonth(),year:d.getFullYear()},time_24h:{hour:d.getHours(),minute:d.getMinutes()},info:c,past:!1};console.log(g);var f=JSON.parse(localStorage.events);f.forEach(function(t){t.id==g.id&&f.splice(f.indexOf(t),1)}),f.push(g),localStorage.setItem("events",JSON.stringify(f)),t("#wdw-event-update").attr("data-event-id",""),t(n).find("[data-event-id="+g.id+"]").remove(),t("#event-listing tbody").prepend('<tr data-event-id="'+g.id+'">\t\t\t\t\t\t\t\t\t<td>'+g.name+"</td>\t\t\t\t\t\t\t\t\t<td>"+g.topic+"</td>\t\t\t\t\t\t\t\t\t<td>"+g.speaker+"</td>\t\t\t\t\t\t\t\t\t<td>"+g.date.day+" "+g.date.month+" "+g.date.year+"</td>\t\t\t\t\t\t\t\t\t<td>"+g.time_24h.hour+":"+g.time_24h.minute+'</td>\t\t\t\t\t\t\t\t\t<td>\t\t\t\t\t\t\t\t\t\t<i class="fa fa-pencil" id="edit-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t\t<i class="fa fa-trash" id="delete-event-icon" aria-hidden="true"></i>\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t\t\t</tr>\t')}),t("#cancel-update-event-btn").on("click",function(){t("#wdw-event-update").attr("data-event-id","")}),t(n).on("click","#delete-event-icon",function(){console.log(".fa-trash icon clicked");var e=t(this).parent().parent().data("event-id"),a=JSON.parse(localStorage.events);a.forEach(function(t){t.id==e&&(a.splice(a.indexOf(t),1),console.log("ID "+t.id+"spliced from localTemp"))}),console.log(a),localStorage.events=JSON.stringify(a),t(n).find("[data-event-id="+e+"]").remove()});var p=[];if(localStorage.sEvents){var v=localStorage.sEvents;p=JSON.parse(v)}t(function(){});for(var u=0;u<p.length;u++)t("#lblEvents").append('<tr><th scope="row"><h4>'+p[u].id+"</h4></th><td><h4>"+p[u].name+'</h4></td><td><i class="fa fa-trash" aria-hidden="true"></i></td></tr>');t("#postbtn").on("click",function(){var e=(new Date).getTime(),n=t("#inputpostimg").val(),a=t("#inputpostevent").val(),o=t("#inputpostdesc").val(),l=t("#inputpostlocation").val(),r="link";t("#lblEvents").append("<tr><td>"+a+"</td><td>"+l+"</td><td>"+e+"</td><td>"+r+'</td><td><i class="fa fa-trash" aria-hidden="true"></i></td></tr>'),i("wdw-calendar");var d={};d.id=(new Date).getTime(),d.imageUrl=n,d.postevent=a,d.PostDesc=o,d.sPostLocation=l,p.push(d);var s=JSON.stringify(p);localStorage.sEvents=s}),t("#lblEvents div").each(function(e){console.log(e+": "+t(this).text()),t(this).css}),t(n).ready(function(){i("wdw-events")}),t(n).ready(function(){d()}),t("#loginbtn").on("click",function(){var e=JSON.parse(localStorage.getItem("credentials")),n=JSON.parse(localStorage.getItem("credentialsMember")),a=t("#inputusername").val(),o=t("#inputpassword").val();e.username===a&&e.password===o||n.username===a&&n.password===o?(console.log("Welcome Mr.   "+e.username),l(),t(".brand h1").text("Logged in as Admin # "+e.username),i("wdw-register-member"),console.log(n.username+n.password)):console.log("failed login")}),t("#memberbtn").on("click",function(){var e=t("#inputfnamereg").val(),n=t("#inputlnamereg").val(),a=t("#inputemailreg").val(),o=t("#inputlocationreg").val(),l=t("#inputusernamereg").val(),r=t("#inputpasswordreg").val(),d={fname:e,lname:n,email:a,location:o,username:l,password:r};localStorage.setItem("credentialsMember",JSON.stringify(d)),console.log("Local Storage store",d),i("wdw-login")}),t(n).ready(function(){t("#wdw-edit-partner").hide(),t("#wdw-add-partner").hide(),t("#partners-table tbody").html("");var e=[];null!==localStorage.getItem("partners")&&(e=JSON.parse(localStorage.partners),console.log("local storage: ",e)),t.getJSON("assets/data/partners.json",function(t){null!=localStorage.getItem("partners")&&"[]"!=localStorage.getItem("partners")||(localStorage.partners=JSON.stringify(t)),t.forEach(function(t){var e={};e.id=t.id,e.name=t.name,e.description=t.description,e.partnerpic_src=t.partnerpic_src,console.log("Partner id.",e.id,", name: ",e.name,", description: ",e.description,", picture/logo: ",e.partnerpic_src)}),s()})});var g;t("body").on("click","#edit-partner-btn",function(){g=t(this).data("partner-id"),t("#wdw-list-partners").hide(),t("#wdw-edit-partner").show();var e=JSON.parse(localStorage.partners);e.forEach(function(e){e.id==g&&(t("input[name='partner-name']").val(e.name),t("input[name='partner-type']").val(e.type),t("input[name='partner-descr']").val(e.description),t("input[name='partner-pict']").val(e.partnerpic_src))})}),t("#partner-save-btn").on("click",function(){var e={};e.id=g,e.name=t("input[name='partner-name']").val(),e.type=t("input[name='partner-type']").val(),e.description=t("input[name='partner-descr']").val(),e.partnerpic_src=t("input[name='partner-pict']").val();var n=JSON.parse(localStorage.partners);n.forEach(function(t,a){t.id==g&&(n[a]=e)}),localStorage.setItem("partners",JSON.stringify(n)),t("#wdw-edit-partner").hide(),s(),t("#wdw-list-partners").show()}),t("#cancel-btn").on("click",function(){t("#wdw-edit-partner").hide(),t("#wdw-list-partners").show()}),t("#add-partner-btn").on("click",function(){t("#wdw-list-partners").hide(),t("#wdw-add-partner").show()}),t("#partner-add-now-btn").on("click",function(){var e={};e.name=t("input[name='partner-add-name']").val(),e.type=t("input[name='partner-add-type']").val(),e.description=t("input[name='partner-add-descr']").val(),e.partnerpic_src=t("input[name='partner-add-pict']").val(),t("input[name='partner-add-name']").val(""),t("input[name='partner-add-type']").val(""),t("input[name='partner-add-descr']").val(""),t("input[name='partner-add-pict']").val("");var n=JSON.parse(localStorage.partners);e.id=n.length+1,n.push(e),localStorage.setItem("partners",JSON.stringify(n)),s(),t("#wdw-add-partner").hide(),t("#wdw-list-partners").show()}),t("#cancel-btn2").on("click",function(){t("#wdw-add-partner").hide(),t("#wdw-list-partners").show()}),t("body").on("click","#delete-partner-btn",function(){g=t(this).data("partner-id");var e=JSON.parse(localStorage.partners);e.forEach(function(t,n){t.id==g&&swal({title:"Are you sure?",text:"Do you want to delete this partner!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",closeOnConfirm:!1},function(){e.splice(n,1),localStorage.setItem("partners",JSON.stringify(e)),s(),swal("Deleted!","The partner has been deleted.","success")})})}),t("#searchEvents").on("click",function(){var e=t("#search-engine").val(),n=e.split(" "),a=[];console.log(n);var o=JSON.parse(localStorage.events);n.forEach(function(t){var e=t;o.forEach(function(t){var n=t.name,o=(t.topic,t.level),i=t.speaker_organization;t.location;c(e,n,t,a),c(e,o,t,a),c(e,i,t,a)})}),console.log(a);var i=a.filter(function(t,e,n){return e==n.indexOf(t)});console.log(i),t("#event-listing").empty();var l=i.length/3;console.log("The base number is: "+l),i.forEach(function(e){var n=e.topic;console.log(i.length),console.log(e.name),t("#event-listing").append('            <div class="event-thirds" data-event-id="'+e.id+'">              <div>                <h1>'+e.name+"</h1>                <h2>"+n+"</h2>                <h5>"+e.date.day+"-"+e.date.month+"-"+e.date.year+"</h5>              </div>            </div>          ")})}),t("#postbtn").on("click",function(){r(),console.log("post event")}),t("#link-login").on("click",function(){i("wdw-login"),console.log("Nav - login clicked")}),t("#link-home").on("click",function(){i("wdw-events"),console.log("Nav - Home Clicked ")}),t("#link-events").on("click",function(){i("wdw-event-manager-container")}),t("#linkNews").on("click",function(){i("wdw-news")}),t("#link-partners").on("click",function(){i("partners-container")}),t("#linkCalendar").on("click",function(){i("wdw-calendar"),console.log("Nav - Calendar clicked")}),t("#linkAllEvents").on("click",function(){i("wdw-all-events"),console.log("Nav - all events click")}),t("#btnpostevent").on("click",function(){i("wdw-post-event"),console.log("Postclicke")}),p.indexOf(this),t(".fa-fa-trash").click(function(){console.log("Trashed clicked",p,p[u],p.length),p.splice(1,1)}),t(".fa-fa-trash").click(function(){t(this).parent().hide(),console.log("Trash delete clicked ")}),console.log("events",p)}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
